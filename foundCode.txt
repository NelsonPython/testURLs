
 /home/iotahub/documentation//projects.md

 /home/iotahub/documentation//README.md

 /home/iotahub/documentation/smartcity/0.1/doc-index.md

 /home/iotahub/documentation/smartcity/0.1/introduction/overview.md

 /home/iotahub/documentation/smartcity/0.1/astropiota/references/sensehat-specs.md

 /home/iotahub/documentation/smartcity/0.1/astropiota/how-to-guides/connect.md
```bash
        sudo nano senseIP.py
        
```python
        import socket
        from sense_hat import SenseHat
        sense = SenseHat()

        def getIP():
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                try:
                        s.connect(('192.168.255.255',1))        #lab network used for this example
                        IP = s.getsockname()[0]
                except:
                        IP = '127.0.0.1'
                finally:
                        s.close()
                return IP

        senseIP = getIP()
        for x in range(3):
                sense.show_message(senseIP, scroll_speed=0.2)
    
```bash
    sudo nano senseBoot.sh
    
```bash
    python3 senseIP.py
    
```bash
    crontab -e
    
```
    @reboot /home/pi/senseBoot.sh
    
```bash
sudo shutdown now


 /home/iotahub/documentation/smartcity/0.1/astropiota/how-to-guides/run.md
```
    Default username:  pi
    Default password:  raspberry
    
```bash
    sudo apt-get remove nodered -y
    sudo apt-get remove nodejs nodejs-legacy -y
    
```bash
    curl -sL https://deb.nodesource.com/setup_8.x | sudo bash -
    sudo apt-get install nodejs -y
    node -v
    npm -v
    
```bash
    git clone https://github.com/iotaledger/iota.lib.js
    cd iota.lib.js
    sudo npm install iota.lib.js
    
```javascript
  var request = require('request');

  var command = {
      'command': 'getNodeInfo'
  };

  var options = {
    url: 'https://nodes.devnet.iota.org:443',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-IOTA-API-Version': '1',
      'Content-Length': Buffer.byteLength(JSON.stringify(command))
    },
    json: command
  };

  request(options, function (error, response, data) {
    if (!error && response.statusCode == 200) {
      console.log(data);
    }
  });
  
```bash
    node getNode.js
    
```bash
    sudo apt-get update
    sudo apt-get install sense-hat
    sudo pip-3.2 install pillow
    
```python
    python3
    >>>from sense_hat import SenseHat
    >>>sense = SenseHat()
    >>>sense.show_message("Hello Sense Hat")
    
```bash
    sudo npm install --unsafe-perm --verbose node-sense-hat
    
```bash
git clone https://github.com/NelsonPython/AstroPiOTA.git
sudo npm install

```bash
    npm run sender
    
```
    npm run receiver ADDRESSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    

 /home/iotahub/documentation/smartcity/0.1/astropiota/how-to-guides/customize.md

 /home/iotahub/documentation/smartcity/0.1/astropiota/how-to-guides/build.md

 /home/iotahub/documentation/smartcity/0.1/astropiota/introduction/overview.md
```json
{"AstroPiData":
{"timestamp":"2018-12 09T01:41:09.752Z",
"accel":{"x":0.01195599976927042,"y":0.0029279999434947968,"z":0.9884439706802368},
"gyro":{"x":0.0393543504178524,"y":0.02155846171081066,"z":-0.02419554442167282},
"compass":{"x":-33.50177764892578,"y":-1.302448034286499,"z":3.9364640712738037},
"fusionPose":{"x":2.86590838432312,"y":1.2279855012893677,"z":-2.3845863342285156},
"tiltHeading":3.102440595626831,
"pressure":1011.86083984375,
"temperature":34.03499984741211,
"humidity":32.178466796875},
"location":"Los Angeles,CA,USA"}


 /home/iotahub/documentation/compass/home.md

 /home/iotahub/documentation/compass/0.1/doc-index.md

 /home/iotahub/documentation/compass/0.1/README.md

 /home/iotahub/documentation/compass/0.1/references/compass-configuration-options.md

 /home/iotahub/documentation/compass/0.1/references/merkle-tree-compute-times.md

 /home/iotahub/documentation/compass/0.1/references/troubleshooting.md
```bash
    sudo usermod -a -G docker $USER
    

 /home/iotahub/documentation/compass/0.1/how-to-guides/set-up-a-private-tangle.md
```bash
	sudo apt-get install pkg-config zip g++ zlib1g-dev unzip python
	
```bash
	wget https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh
	
```bash
	chmod +x bazel-0.18.0-installer-linux-x86_64.sh
	
```bash
	./bazel-0.18.0-installer-linux-x86_64.sh --user
	
```bash
	sudo apt install apt-transport-https ca-certificates curl software-properties-common
	
```bash
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
	sudo apt update
	sudo apt install docker-ce
	
```bash
	sudo add-apt-repository universe
	sudo apt install jq
	
```bash
	git clone https://github.com/iotaledger/compass.git
	cd compass
	
```bash
	bazel run //docker:layers_calculator
	
```
	INFO: SHA256 (https://github.com/grpc/grpc-java/archive/fe7f043504d66e1b3f674c0514ce794c8a56884e.zip) = 19c51698d4837d1978a10ed7a01f4e45a0b15bcbd3db44de2a2a1c3bdd1cf234
	Analyzing: target //docker:layers_calculator (8 packages loaded)
	
```bash
	cat /dev/urandom |LC_ALL=C tr -dc 'A-Z9' | fold -w 81 | head -n 1 
	
```bash
	cd docs/private_tangle
	
```bash
	cp config.example.json config.json
	
```bash
	nano config.json
	
```json
	{
		"seed": "MYSEEDHEREPLEASEREPLACEMEIMMEDIATELYWITHSOMETHINGSECURE99999999999999999999999999",
		"powMode": "CURLP81",
		"sigMode": "CURLP27",
		"security": 1,
		"depth": 16,
		"milestoneStart": 0,
		"mwm": 9,
		"tick": 60000,
		"host": "http://localhost:14265"
	}
	
```bash
	sudo ./01_calculate_layers.sh
	
```shell
[main] INFO org.iota.compass.LayersCalculator - Calculating 65536 addresses.
...
[main] INFO org.iota.compass.LayersCalculator - Successfully wrote Merkle Tree with root: JMRTYHMGNZGNOLPSSBVLWRPMGIAMOXPLURNDIBKXIFTCJCLOYKH9FMVNKPBVFVMGSUFEYVUUIEARFQXAK

```bash
	touch snapshot.txt
	nano snapshot.txt
	
```shell
	FJHSSHBZTAKQNDTIKJYCZBOZDGSZANCZSWCNWUOCZXFADNOQSYAHEJPXRLOVPNOQFQXXGEGVDGICLMOXX;2779530283277761
	
```bash
	sudo ./02_run_iri.sh
	
```bash
	cd ~/compass/
	bazel run //docker:coordinator
	
```bash
	cd docs/private_tangle
	
```bash
	sudo ./03_run_coordinator.sh -bootstrap -broadcast
	
```js
 var request = require('request');

 const iota = require('@iota/core');

 Iota = iota.composeAPI({
     provider: 'http://localhost:14265'
 });

 var address = iota.generateAddress('SEED99999999999999999999999999999999999999999999999999999999999999999999999999999',0);

 getBalance(address);

 function getBalance(address) {

     var command = {
     'command': 'getBalances',
     'addresses': [
     address
     ],
     'threshold':100
     }

     var options = {
     url: 'http://localhost:14265',
     method: 'POST',
     headers: {
     'Content-Type': 'application/json',
     'X-IOTA-API-Version': '1',
     'Content-Length': Buffer.byteLength(JSON.stringify(command))
     },
     json: command
     };

     request(options, function (error, response, data) {
         if (!error && response.statusCode == 200) {
         console.log(JSON.stringify(data,null,1));
         }
     });
 }
 
```json
{
 "balances": [
  "2779530283277761"
 ],
 "references": [
  "BDZPAONKWQTVCXFFO9GBTJ9GGWPRLITXZ9BMYALTCVWNOLFYPNHFJHPDWICRPGCZWUNDQHV9UDEXGW999"
 ],
 "milestoneIndex": 7,
 "duration": 1
}


 /home/iotahub/documentation/compass/0.1/introduction/overview.md

 /home/iotahub/documentation/ciri/home.md

 /home/iotahub/documentation/ciri/0.1/doc-index.md

 /home/iotahub/documentation/ciri/0.1/README.md

 /home/iotahub/documentation/ciri/0.1/references/ciri-configuration-options.md

 /home/iotahub/documentation/ciri/0.1/references/troubleshooting.md
```bash
2019-02-13 11:04:46:    broadcaster:WARNING: Broadcasting transaction failed
2019-02-13 11:04:46:      requester:WARNING: Sending request failed
2019-02-13 11:04:46:      requester:WARNING: Sending request failed


 /home/iotahub/documentation/ciri/0.1/references/trit-encoding.md
```bash
bazel build -c opt --define network=mainnet --define trit_encoding=5 --crosstool_top=@iota_toolchains//tools/aarch64--glibc--bleeding-edge-2018.07-1:toolchain --cpu=aarch64 --compiler='gcc' --host_crosstool_top=@bazel_tools//tools/cpp:toolchain //ciri

```bash
bazel run -c opt --define network=mainnet --define trit_encoding=5 -- ciri


 /home/iotahub/documentation/ciri/0.1/how-to-guides/run-a-ciri-node-on-an-sbc.md
```bash
    sudo apt-get install -y git
    
```bash
    git clone https://github.com/iotaledger/entangled.git && cd entangled
    
```bash
uname -m

```bash
    bazel build -c opt --define network=mainnet --define trit_encoding=5 --crosstool_top=@iota_toolchains//tools/aarch64--glibc--bleeding-edge-2018.07-1:toolchain --cpu=aarch64 --compiler='gcc' --host_crosstool_top=@bazel_tools//tools/cpp:toolchain //ciri
    
```bash
    bazel build -c opt --define network=mainnet --define trit_encoding=5 --crosstool_top=@iota_toolchains//tools/armv7-eabihf--glibc--bleeding-edge-2018.07-1:toolchain --cpu='armeabi-v7a' --compiler='gcc' --host_crosstool_top=@bazel_tools//tools/cpp:toolchain //ciri
    
```bash
    --define network=value
    
```bash
    --define trit_encoding=5
    
```bash
    --compiler='value'
    
```bash
ssh -t USERNAME@IP_ADDRESS "sudo mkdir -p /etc/iota/ciri && sudo chown -R USERNAME:GROUP_NAME /etc/iota/ciri"

```
IPv6 address: fe80::3fdc:53f0:949a:72b9
Network interface: wlp4s0

```bash
scp -r -6 SOURCE USERNAME@\[fe80::3fdc:53f0:949a:72b9%wlp4s0\]:TARGET

```bash
scp -r bazel-out/armeabi-v7a-opt/bin/ciri/ USERNAME@IP_ADDRESS:/etc/iota/

```bash
scp -r bazel-out/aarch64-opt/bin/ciri/ USERNAME@IP_ADDRESS:/etc/iota/

```bash
    cd /etc/iota/ciri && \
    mkdir -p external/snapshot_conf_mainnet/file/ && \
    mkdir -p external/snapshot_sig_mainnet/file/ && \
    mkdir -p external/snapshot_mainnet/file/ && \
    mv ciri app && \
    mkdir -p ciri
    
```yaml
    log-level: info
    neighbors: "udp://148.148.148.148:14265"
    port: 14265
    
```bash
    sudo apt-get install sqlite3
    
```bash
    mkdir -p db
    wget https://raw.githubusercontent.com/iotaledger/entangled/develop/common/storage/sql/schema.sql -O schema.sql
    sqlite3 db/mainnet.db < schema.sql
    
```bash
    wget https://raw.githubusercontent.com/iotaledger/snapshots/master/mainnet/20181222/snapshot.json -O external/snapshot_conf_mainnet/file/downloaded
    wget https://raw.githubusercontent.com/iotaledger/snapshots/master/mainnet/20181222/snapshot.sig -O external/snapshot_sig_mainnet/file/downloaded
    wget https://raw.githubusercontent.com/iotaledger/snapshots/master/mainnet/20181222/snapshot.txt -O external/snapshot_mainnet/file/downloaded
    
```bash
./app \
--snapshot-file="external/snapshot_mainnet/file/downloaded" \
--snapshot-signature-file="external/snapshot_sig_mainnet/file/downloaded" \
--snapshot-signature-index=signature.index \
--snapshot-signature-depth=signature.depth \
--snapshot-signature-pubkey="signature.pubkey" \
--num-keys-in-milestone=NUM_KEYS_IN_MILESTONE \
--db-path="db/mainnet.db"


 /home/iotahub/documentation/ciri/0.1/how-to-guides/run-a-ciri-node-on-linux.md
```bash
    sudo apt-get install -y git
    
```bash
    git clone https://github.com/iotaledger/entangled.git && cd entangled
    
```bash
    sudo apt-get install sqlite3
    
```bash
    sqlite3 ciri/db/ciri-mainnet.db < common/storage/sql/schema.sql
    
```yaml
    log-level: info
    neighbors: "udp://148.148.148.148:14265"
    port: 14265
    
```bash
    bazel run --define trit_encoding=5 --define network=mainnet|testnet -- ciri <configuration flags>
    

 /home/iotahub/documentation/ciri/0.1/introduction/overview.md

 /home/iotahub/documentation/utils/home.md

 /home/iotahub/documentation/utils/0.1/doc-index.md

 /home/iotahub/documentation/utils/0.1/community/raspberry-pi-pub-sub/overview.md
```
  git clone https://github.com/iota-community/raspberrypi-pubsub
  
```bash
  cd raspberrypi-pubsub
  
```bash
  npm install
  
```bash
  node index.js
  

 /home/iotahub/documentation/utils/0.1/community/mam-watcher/overview.md
```
    git clone https://github.com/iota-community/mam-watcher
    
```bash
    cd mam-watcher
    
```bash
    npm install
    
```bash
    node sender.js
    
```
    node fetcher.js <address (also called the MAM root)>
    
```js
    var sideKey = asciiToTrytes('mySuperSecretSideKey');

    while(sideKey.length % 81 !== 0){
    sideKey += '9';
    }
    
```js
    mamState = Mam.changeMode(mamState, 'restricted', sideKey);
    
```js
    publish('Super secret message' + count++);
    
```js
    const { asciiToTrytes } = require('@iota/converter')

    var sideKey = asciiToTrytes('mySuperSecretSideKey');

    while(sideKey.length % 81 !== 0){
    sideKey += '9';
    }
    
```js
    await Mam.fetch(root, 'restricted', sideKey, showData)
    

 /home/iotahub/documentation/utils/0.1/community/one-command-tangle/overview.md
```bash
    git clone https://github.com/iota-community/one-command-tangle.git
    
```bash
    docker-compose -f docker-compose.yml -f docker-compose-tools.yml up
    
```js
 var request = require('request');

 const iota = require('@iota/core');

 Iota = iota.composeAPI({
     provider: 'http://localhost:14265'
 });

 var address = iota.generateAddress('SEED99999999999999999999999999999999999999999999999999999999999999999999999999999',0);

 getBalance(address);

 function getBalance(address) {

     var command = {
     'command': 'getBalances',
     'addresses': [
     address
     ],
     'threshold':100
     }

     var options = {
     url: 'http://localhost:14265',
     method: 'POST',
     headers: {
     'Content-Type': 'application/json',
     'X-IOTA-API-Version': '1',
     'Content-Length': Buffer.byteLength(JSON.stringify(command))
     },
     json: command
     };

     request(options, function (error, response, data) {
         if (!error && response.statusCode == 200) {
         console.log(JSON.stringify(data,null,1));
         }
     });
 }
 
```json
{
 "balances": [
  "2779530283277761"
 ],
 "references": [
  "BDZPAONKWQTVCXFFO9GBTJ9GGWPRLITXZ9BMYALTCVWNOLFYPNHFJHPDWICRPGCZWUNDQHV9UDEXGW999"
 ],
 "milestoneIndex": 7,
 "duration": 1
}

```bash
    docker-compose -f docker-compose.yml -f docker-compose-ssl.yml up
    
```
    {
    "error": "Invalid API Version",
    "duration": 0
    }
    
```
    SEED99999999999999999999999999999999999999999999999999999999999999999999999999999
    

 /home/iotahub/documentation/utils/0.1/official/tryte-compress/overview.md
```js
    const Iota = require('@iota/core');
    const Compressor = require('@iota/tryte-compress');
    const Converter = require('@iota/converter');
    const fs = require('fs');
    
```js
    const iota = Iota.composeAPI({
    provider: 'https://nodes.devnet.iota.org:443'
    });
    
```js
    const seed =
    'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';

    const address = 'HELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDD';
    
```js
    const message = Converter.asciiToTrytes('Hello World!');
    const transfers = [
    {
        value: 0,
        address: address,
        message: message
    }
    ];
    
```js

    let bundleTrytes;

    iota.prepareTransfers(seed, transfers)
    .then(trytes => {
        // Store the trytes in a global variable
        bundleTrytes = trytes[0];
        return iota.sendTrytes(trytes, 3/*depth*/, 9/*MWM*/)
    })
    .then(bundle => {
        // Store the tail transaction hash and the transaction trytes
        storeTailTransaction(bundle[0].hash, bundleTrytes);
    })
    .catch(error => {
        // Catch any errors
        console.log(error);
    });
    
```js
    function storeTailTransaction (transactionHash, bundleTrytes) {

    let compressed = Compressor.compressTrytes(bundleTrytes);

    let wstream = fs.createWriteStream(transactionHash);

    wstream.on('finish', function () {
        console.log(`Compressed tail transaction trytes were saved to: ${transactionHash}`);
      });

    wstream.write(compressed);

    wstream.end();

    }
    
```bash
node index.js

```
Compressed tail transaction trytes were saved to: MZGKBEXTDCVNBRZYFLFPWWQKWT9OB9ULHKQDHTCMQGITEIXKUDJJU9KVOW9UEIKJAMQAOJU9OITXEV999

```js
// Require the packages
const Iota = require('@iota/core');
const Compressor = require('@iota/tryte-compress');
const Converter = require('@iota/converter');
const fs = require('fs');

// Create a new instance of the IOTA object
// Use the `provider` field to specify which IRI node to connect to
const iota = Iota.composeAPI({
provider: 'https://nodes.devnet.iota.org:443'
});

const address = 'HELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDD';

const seed = 'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';

const message = Converter.asciiToTrytes('Compress transaction trytes tutorial');

const transfers = [
    {
    value: 0,
    address: address,
    message: message
    }
];

let bundleTrytes;

iota.prepareTransfers(seed, transfers)
  .then(trytes => {
    // Store the trytes in a global variable
    bundleTrytes = trytes[0];
    return iota.sendTrytes(trytes, 3/*depth*/, 9/*MWM*/)
  })
  .then(bundle => {
    // Store the tail transaction hash and the transaction trytes
    storeTailTransaction(bundle[0].hash, bundleTrytes);
    var JSONBundle = JSON.stringify(bundle,null,1);
    console.log(`Sent bundle: ${JSONBundle}`);
  })
  .catch(error => {
    // Catch any errors
    console.log(error);
});

function storeTailTransaction (transactionHash, bundleTrytes) {

    let compressed = Compressor.compressTrytes(bundleTrytes);

    let wstream = fs.createWriteStream(transactionHash);

    wstream.on('finish', function () {
        console.log(`Compressed tail transaction trytes were saved to: ${transactionHash}`);
      });

    wstream.write(compressed);

    wstream.end();
}

```js
    function readCompressedTailTransaction (file){

        let transactionBytes = fs.readFileSync(file);

        let transactionTrytes = Compressor.decompressTrytes(transactionBytes);

        console.log(transactionTrytes);

    }
    

 /home/iotahub/documentation/utils/0.1/official/iota-area-codes/overview.md
```js
    const Iota = require('@iota/core');
    const iotaAreaCodes = require('@iota/area-codes');
    
```js
    const iota = Iota.composeAPI({
    provider: 'https://nodes.devnet.iota.org:443'
    });
    
```js
    const seed =
    'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';
    
```js
    var iac = iotaAreaCodes.encode(52.529510, 13.413018, iotaAreaCodes.CodePrecision.EXTRA);
    
```js
    const transfers = [
    {
    value: 0,
    address: "HELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDD",
    tag: iac
    }
    ];

    iota.prepareTransfers(seed, transfers)
    .then(trytes => {
    return iota.sendTrytes(trytes, 3/*depth*/, 9/*MWM*/)
    })
    .then(bundle => {
    console.log("Bundle sent with the tagged transaction");
    })
    .catch(err => {
    // Catch any errors
    console.log(err);
    });
  
```js
    var locations =[];

    iota.findTransactions({tags:[iac]})
        .then(trytes => {
    iota.getTransactionObjects(trytes)
        .then(
            array => {
                for(i=0;i<array.length;i++){
                    let areaCode = iotaAreaCodes.extract(array[i].tag);
                    let data = iotaAreaCodes.decode(areaCode);
                    locations.push({"lat": data.latitude, "lng":data.longitude});
                }
                    console.log(`${locations[i]} transactions found with the ${iac} tag`)
            }
        )
    })
    .catch(err => {
    // Catch any errors
    console.log(err);
    });
    
```bash
node index.js

```
IOTA Area Code NPHTQORL9XKF
index.js:15
Object {lat: 52.52951250000001, lng: 13.413015624999982}
index.js:51
Object {lat: 52.52951250000001, lng: 13.413015624999982}
index.js:51
Object {lat: 52.52951250000001, lng: 13.413015624999982}
index.js:51
Object {lat: 52.52951250000001, lng: 13.413015624999982}
index.js:51
Object {lat: 52.52951250000001, lng: 13.413015624999982}
index.js:51
Object {lat: 52.52951250000001, lng: 13.413015624999982}
index.js:51
Object {lat: 52.52951250000001, lng: 13.413015624999982}
Bundle sent with tagged transaction


 /home/iotahub/documentation/utils/0.1/official/tangle-certificate/overview.md
```
integrations@iota.org

```xml
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="100%" height="100%" viewBox="0 0 842 596" version="1.1" xmlns="http://www.w3.org/2000/svg">
<rect x="0" y="0" width="842" height="596" style="fill:white;"/>
<rect x="30.81" y="30.82" width="779.66" height="533.38" style="fill:none;stroke:rgb(189,190,192);stroke-width:12px;"/>
<text x="100" y="100"> %%TEMPLATE-ADDITIONAL%%</text>
<text x="100" y="480" class="signature"> %%ISSUER-SIGNATURE%%</text>
<text x="50%" y="165" class="caption" text-anchor="middle">Certificate Of Attendance</text>
<text x="50%" y="220" class="training-title" text-anchor="middle">%%TRAINING-TITLE%%</text>
<text x="50%" y="295" class="participant" text-anchor="middle">%%PARTICIPANT%%</text>
<text x="50%" y="352" class="participation-date" text-anchor="middle">%%PARTICIPATION-DATE%%</text>
<text x="50%" y="390" class="info" text-anchor="middle">This certificate confirms that the training specified was attended and completed by the person on the date shown.</text>
<text x="50%" y="410" class="info" text-anchor="middle">You can validate the authenticity of this certificate by scanning the QR code, or by visiting %%AUTH-DOMAIN%%</text>
<text x="50%" y="420" class="info" text-anchor="middle">and entering the hash shown at the bottom of this certificate.</text>
<text x="17%" y="545" class="hash" text-anchor="start">Hash: %%HASH%%</text>
<text x="83%" y="545" class="hash" text-anchor="end">Issued On: %%ISSUED-DATE%%</text>
<svg x="44%" y="430">%%QR-CODE%%</svg>
<style>
.signature {
    font-family:"FreestyleScript-Regular", "Freestyle Script", cursive;
    font-size:33.333px;
}
.caption {
    font-family: "Nunito Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    font-weight: 300;
    font-size: 26px;
}
.training-title {
    font-family: "Nunito Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    font-weight: 600;
    font-size: 32px;
}
.participant {
    font-family: "Nunito Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    font-weight: 600;
    font-size: 25px;
}
.participation-date {
    font-family: "Nunito Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    font-weight: normal;
    font-size: 18px;
}
.info {
    font-family: "Nunito Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    font-weight: 300;
    font-size: 10px;
}
.hash {
    font-family: "Nunito Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    font-weight: normal;
    font-size: 8px;
}
</svg>

```js
    const fs = require('fs');
    const axios = require('axios');

    const API_ENDPOINT = 'https://certification-api.iota.works';
    const ORG_ID = '$ORG_ID'
    const ADMIN_USER_ID = '$ADMIN_USER_ID';
    const ADMIN_PASS_PHRASE = '$ADMIN_PASS_PHRASE';
    const BACKGROUND_PATH = 'background.svg';

    const ax = axios.create({ baseURL: API_ENDPOINT });

    async function createBackground() {
        console.log("Creating background...");

        // Call the background endpoint (https://certification-api.iota.org/docs/?javascript--nodejs#createupdatebackground) with your credentials
        const response = await ax.put(`background`, {
            adminId: ADMIN_USER_ID,
            adminPassPhrase: ADMIN_PASS_PHRASE,
            content: fs.readFileSync(BACKGROUND_PATH).toString()
        });

        if (response.data.success) {
            console.log("Created background", response.data.backgroundId);
            return response.data.backgroundId;
        } else {
            console.error("Failed creating background", response.data.message);
        }
    }

    async function createTemplate(backgroundId) {
        console.log("Creating template...");
        // // Call the template endpoint (https://certification-api.iota.org/docs/?javascript--nodejs#createupdatetemplate) with your credentials
        const response = await ax.put(`template`, {
            adminId: ADMIN_USER_ID,
            adminPassPhrase: ADMIN_PASS_PHRASE,
            name: `My test certificate`,
            backgroundId,
            additionalContent: `Test Certificate`,
            caption: "Template Caption",
            qrColor: "#0000FF",
            canIssue: true
        });

        if (response.data.success) {
            console.log("Created template", response.data.templateId);
            return response.data.templateId;
        } else {
            console.error("Failed creating template", response.data.message);
        }
    }

    async function createIssuer(templateId) {
        console.log("Creating issuer...");
        // Call the issuer endpoint (https://certification-api.iota.org/docs/?javascript--nodejs#createupdateissuer) with your credentials
        const response = await ax.put(`issuer`, {
            adminId: ADMIN_USER_ID,
            adminPassPhrase: ADMIN_PASS_PHRASE,
            name: `test`,
            newPassPhrase: `testPassPhrase`,
            canIssue: true,
            isAdministrator: false,
            allowedTemplates: [templateId],
            signature: `My example signature`
        });

        if (response.data.success) {
            console.log("Created issuer", response.data.issuerId);
            return response.data.issuerId;
        } else {
            console.error("Failed creating issuer", response.data.message);
        }
    }

    async function createCertificate(issuerId, templateId) {
        console.log("Creating certificate...");
        // Call the issuer endpoint (https://certification-api.iota.org/docs/?javascript--nodejs#createcertificate) with your credentials
        const response = await ax.post(`certificate`, {
            issuerId,
            // Specify the text to use to replace the %%%% placeholders in the template
            issuerPassPhrase: `testPassPhrase`,
            participant: `Mr Smith`,
            participationDate: "07/01/2019 - 08/18/2019",
            trainingTitle: `My Course Title`,
            issuedDate: "08/18/2019",
            templateId
        });

        if (response.data.success) {
            console.log("Created certificate", response.data.hash, response.data.validationUrl);
        } else {
            console.error("Failed creating certificate", response.data.message);
        }
    }

    // Create the background, template, issuer, and certificate
    (async function () {
        try {
            const backgroundId = await createBackground();
            if (backgroundId) {
                const templateId = await createTemplate(backgroundId);

                if (templateId) {
                    const issuerId = await createIssuer(templateId);

                    if (issuerId) {
                        await createCertificate(issuerId, templateId);
                    }
                }
            }
        } catch (err) {
            console.error('Request failed', err.message);
        }
    })();
    
```bash
node index.js

```
Creating background...
Created background JQHNXOTAT9CBTYGHKANMG9WNCIZ
Creating template...
Created template 9YSCXMHF9TJNYLRSNYZRP9ARVYH
Creating issuer...
Created issuer RAQSQWHEAANVOGWD9RVJI9ZPMHI
Creating certificate...
Created certificate FAZLSJRLEPPBRVITOPBZNTIVEJWPEQARIOEHNMHBEOJDGABLKPYIHWPMAJWVZTJXFIAFGSVXPGOCBQ999 https://certification.iota.works/FAZLSJRLEPPBRVITOPBZNTIVEJWPEQARIOEHNMHBEOJDGABLKPYIHWPMAJWVZTJXFIAFGSVXPGOCBQ999


 /home/iotahub/documentation/utils/0.1/official/proof-of-existance/overview.md
```
    My super secret contract.
    
```js
    require('regenerator-runtime');
    const PoEx = require ('@iota/poex-tool');
    
```js
    async function publish (file) {
    }
    
```js
    async function publish (file) {

    const hash = PoEx.hash(file);

        try {
            // Attach the file hash to the Tangle in a bundle
            const bundle = await PoEx.publish({
            provider: 'https://nodes.devnet.iota.org:443',
            data: hash,
            tag: 'POEXTUTORIAL',
            address: 'HELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDD',
            seed: 'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX',
            depth: 3,
            minWeightMagnitude: 9
            });
            tailTransaction = bundle[0];
            console.log(`Attached the transaction to the Tangle with hash: ${tailTransaction.hash}`);
            } catch(error) {
            console.log(`Something went wrong: ${error}`);
            }
        }
    }
    
```js
    publish('contract.txt');
    
```js
    // Set the node to check for the transaction
    tailTransaction.provider = 'https://nodes.devnet.iota.org:443';

    // Verifying if the file is unchanged
    const verified = PoEx.verify(tailTransaction, false, file);
    verified? console.log('File verified: The file matches the hash on the Tangle')
    : ('Something has changed. The hash on the Tangle is no longer a match.');
    
```bash
node index.js

```
File verified: The file matches the hash on the Tangle


 /home/iotahub/documentation/utils/0.1/introduction/overview.md

 /home/iotahub/documentation/contribution/0.1/style-guide.md
```bash
    git clone https://github.com/{your username}/documentation
    
```bash
    cd documentation
    git remote add upstream https://github.com/iotaledger/documentation.git
    git fetch upstream
    
```bash
    git pull upstream develop:<your branch name>
    git push origin <your branch name>
    
```bash
    git checkout <your branch name>
    
```bash
    git add .
    
```bash
    Please tell me who you are
    Run 
    git config --global user.email "you@example.com"
    git config --global user.name "Your Name"
    
```bash
    git commit -m "<Describe the changes you made>"
    
```bash
    git push origin <your branch name>
    
```shell
node buildProjects

```json
{
    "global": [
        "(P|p)ermission(less|ed)"
    ],
    "smartcity": [
        "AstroPi"
    ]
}

```shell
node buildProjects getting-started

```markdown
--------------------
### Tab Page 1
This is the content in tab page 1.
---
### Tab Page 2
This is the content in tab page 2.
--------------------

```markdown
-------------------------
Image
## Title with link to file
Data silos make it difficult to buy and sell data among different data points. To overcome this challenge, the Data Marketplace uses IOTA MAM channels to open up the data silos and allow users to make micropayments of IOTA tokens to the data owners in exchange for data.
-------------------------

```markdown
### **OFFICIAL SUPPORT** ###

### __COMMUNITY SUPPORT__ ###

```markdown
---------------
#### **JavaScript Library** ####
Link to file

Excepteur sint occaecat cupidatat non proident, sunt in culpa qui.
---
#### __Go Library__ ####
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui.
---
#### Python Library ####
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui.
---------------

```markdown
:smile:
:laughing:

```markdown
¬¬¬
[map]
{
    "zoom":14,
    "center": {
        "lat": 52.5294498,
        "lng": 13.412903
    },
    "markers": [
        {
            "name": "IOTA Foundation",
            "lat": 52.5294498,
            "lng": 13.412903
        }
    ]
}
¬¬¬

```markdown
¬¬¬
[feed]
{
    "displayType": "event",
    "context": "training"
}
¬¬¬

```markdown
:::success:A Success
This is the content,
on multiple lines :tada:
:::

:::warning:Just A Warning Title:::

:::info:
Some multiline content only.
This is line 2.
:::

:::danger:Danger Danger
Will Robinson :bomb:
:::

```bash
user@hostname:~/tmp$ mkdir whatever

```bash
mkdir whatever


 /home/iotahub/documentation/contribution/0.1/doc-index.md

 /home/iotahub/documentation/iota-js/0.1/doc-index.md

 /home/iotahub/documentation/iota-js/0.1/account-module/references/cda-advice.md

 /home/iotahub/documentation/iota-js/0.1/account-module/how-to-guides/create-account.md
```js
      const { createAccount }  = require('@iota/account')

      const seed = 'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';

      // Connect to a node;
      const provider = 'https://nodes.devnet.iota.org:443';

      const account = createAccount({
            seed,
            provider
      });
      
```js
      const account = createAccount({
            seed,
            provider,

            // How far back in the Tangle to start the tip selection
            depth: 3,

            // The minimum weight magnitude is 9 on the Devnet
            minWeightMagnitude: 9,

            // How long to wait before the next attachment round
            delay: 1000 * 30,

            // The depth at which transactions are no longer promotable
            // Those transactions are automatically re-attached
            maxDepth: 6
      });
      
```js
      const { createPersistenceAdapter }  = require('@iota/persistence-adapter-level')

      const account = createAccount({
            seed,
            provider,
            persistencePath: './',
            persistenceAdapter: createPersistenceAdapter
      });
      
```js
      const account = createAccount({
            seed,
            provider,
            timeSource: () => {
                  // Get time with NTP
                  // const time = ...
                  return time
            }
      })
      

 /home/iotahub/documentation/iota-js/0.1/account-module/how-to-guides/create-and-manage-cda.md
```js
    const cda = account
        .generateCDA({
            timeoutAt: Date.now() + 24 * 60 * 60 * 1000,
            expectedAmount: 1000
        });
    
```js
    cda
        .tap(cda => console.log('Sending to:', cda.address))
        .then(cda =>
            account.sendToCDA({
                ...cda,
                value: 1000
            })
            .then((trytes) => {
            console.log('Successfully prepared transaction trytes:', trytes)
        })
        )
        .catch(err => {
            // Handle errors here...
        });
    
```js
account.startAttaching({
    depth: 3,
    minWeightMagnitude: 9,
    delay: 30 * 1000

    // How far back in the Tangle to start the tip selection
    depth: 3,

    // The minimum weight magnitude is 9 on the Devnet
    minWeightMagnitude: 9,

    // How long to wait before the next attachment round
    delay: 1000 * 30,

    // The depth at which transactions are no longer promotable
    // Those transactions are automatically re-attached
    maxDepth: 6
});

account.stopAttaching();

```js
    account.getAvailableBalance()
    .then(balance => {
        const cda = account.generateCDA({
                timeoutAt: Date.now() + 24 * 60 * 60 * 1000,
                expectedAmount: balance
            })
            .then(cda => {
                account.sendToCDA({
                ...cda,
                value: balance
            })
            .then((trytes) => {
                console.log('Successfully prepared transaction trytes:', trytes)
            })
        })
    })
    .catch(err => {
            // Handle errors here...
    });
    
```js
{
   address, // The last 9 trytes are the checksum
   timeoutAt,
   multiUse,
   expectedAmount
}

```js
    const CDA = require('@iota/cda');
    
    const magnetLink = CDA.serializeCDAMagnet(cda);
    // iota://MBREWACWIPRFJRDYYHAAME…AMOIDZCYKW/?timeout_at=1548337187&multi_use=1
    
```js
     const magnetLink = 'iota://MBREWACWIPRFJRDYYHAAME…AMOIDZCYKW/?timeout_at=1548337187&multi_use=1&expected_amount=0';
     const { address, timeoutAt, multiUse, expectedAmount } = parseCDAMagnet(
        magnetLink
    );

    account.sendToCDA({
        address,
        timeoutAt,
        multiUse,
        expectedAmount,
        value: 1000
    })
        .then((trytes) => {
            console.log('Successfully prepared the transaction:', trytes)
        })
        .catch(err => {
            // Handle errors here...
        });

    account.startAttaching({
        depth: 3,
        minWeightMagnitude : 9,
        delay: 30 * 1000 // 30 second delay
    });
    

 /home/iotahub/documentation/iota-js/0.1/account-module/how-to-guides/listen-to-events.md
```js
    account.on('pendingDeposit', ({ address, bundle }) => {
        console.log('Receiving a new payment')
        console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);
    });

    account.on('includedDeposit', ({ address, bundle }) => {
        console.log('Received a new payment')
        console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);
    });

    account.on('pendingWithdrawal', ({ address, bundle }) => {
        console.log('Outgoing payment is pending')
        console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);
    });

    account.on('includedWithdrawal', ({ address, bundle }) => {
        console.log('Outgoing payment confirmed')
        console.log('Address:', address, 'Tail transaction hash:', bundle[0].hash);
    });
    
```js
    account.on('error', (error) => {
        console.log(`Something went wrong: ${error}`);
    });
    

 /home/iotahub/documentation/iota-js/0.1/account-module/introduction/overview.md
```bash
    npm install @iota/account @iota/cda @iota/persistence-adapter-level
    
```bash
    yarn add @iota/account @iota/cda @iota/persistence-adapter-level
    
```bash
    cd iota.js
    
```bash
    npm run init
    
```bash
npm run test


 /home/iotahub/documentation/iota-js/0.1/workshop/check-balance.md
```js
    const Iota = require('@iota/core');
    
```js
    const iota = Iota.composeAPI({
    provider: 'https://nodes.devnet.iota.org:443'
    });
    
```js
    const address =
    'NBZLOBCWG9BAQTODDKNF9LYYTBOUWSQSGCWFQVZZR9QXCOAIBRYDTZOEGBGMZKJYZOPPGRGFFWTXUKUKW';
    
```js
    iota.getBalances([address], 100)
      .then(({ balances }) => {
      console.log(balances)
      })
      .catch(err => {
      console.error(err)
      });
    
```
    [500]
    

 /home/iotahub/documentation/iota-js/0.1/workshop/send-your-first-bundle.md
```js
    const Iota = require('@iota/core');
    const Converter = require('@iota/converter');
    
```js
    const iota = Iota.composeAPI({
    provider: 'https://nodes.devnet.iota.org:443'
    });
    
```js
    const depth = 3;
    const minimumWeightMagnitude = 9;
    
```js
    const address =
    'HEQLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWOR99D';
    
```js
    const seed =
    'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';
    
```js
    const message = "HELLOWORLD";
    const messageInTrytes = Converter.asciiToTrytes(message);
    
```js
    const transfers = [
    {
        value: 0,
        address: address,
        message: messageInTrytes
    }
    ];
    
```js
    iota.prepareTransfers(seed, transfers)
        .then(trytes => {
            return iota.sendTrytes(trytes, depth, minimumWeightMagnitude);
        })
        .then(bundle => {
            console.log(bundle)
        })
        .catch(err => {
            console.error(err)
        });
    

 /home/iotahub/documentation/iota-js/0.1/workshop/overview.md

 /home/iotahub/documentation/iota-js/0.1/workshop/read-transactions.md
```js
    const Iota = require('@iota/core');
    const Converter = require('@iota/converter');
    
```js
    const iota = Iota.composeAPI({
    provider: 'https://nodes.devnet.iota.org:443'
    });
    
```js
    const address =
    'HEQLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWOR99D';
    
```js
    // Get any transactions that were sent to the address
    iota.findTransactionObjects({ addresses: [address] })
        .then(response => {
            console.log(response);
        })
        .catch(err => {
            console.error(err);
        });
    
```json
    [
    {
    "hash": "UJDFGYGCWMANPFQNMOHHOSXHSNMKJCZEGG9SVTIQFTMJVUBYDHVUB9IGWFSDTEKXACMGIEBRIQYHUA999",
    "signatureMessageFragment": "RBOBVBVBYBFCYBACVBNB9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
    "address": "HEQLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWOR99D",
    "value": 0,
    "obsoleteTag": "XA9999999999999999999999999",
    "timestamp": 1564473151,
    "currentIndex": 0,
    "lastIndex": 0,
    "bundle": "YXYECBJHRZCAR9ODOUVEPLJLKTTKHKEFOXEDRPECOSNOHFFEAXADCVKYAJEWJWOKFNYKWLKTKDOWJTBUD",
    "trunkTransaction": "VK9FOJYEXCRCFGMZACSNHYSMTCOSAVQFCLHNVUSFPZZNWOFXSSRQORMEGSBOOLPKDMQF9ZPPMXADKC999",
    "branchTransaction": "VK9FOJYEXCRCFGMZACSNHYSMTCOSAVQFCLHNVUSFPZZNWOFXSSRQORMEGSBOOLPKDMQF9ZPPMXADKC999",
    "tag": "XA9999999999999999999999999",
    "attachmentTimestamp": 1564473150406,
    "attachmentTimestampLowerBound": 0,
    "attachmentTimestampUpperBound": 3812798742493,
    "nonce": "TXPCKNXBMLMLSKSMUUBOPIHCOSE"
    }
    ]
    

 /home/iotahub/documentation/iota-js/0.1/workshop/transfer-iota-tokens.md
```js
    const Iota = require('@iota/core');
    
```js
    const iota = Iota.composeAPI({
    provider: 'https://nodes.devnet.iota.org:443'
    });
    
```js
    const depth = 3;
    const minimumWeightMagnitude = 9;
    
```js
    // Replace this seed with one that owns an address with free Devnet tokens 
    const seed =
    'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';
    
```js
    const receivingAddress = iota.getNewAddress(seed, {
        index: 1,
        total: 1
    });
    
```js
    const transfers = [
    {
      value: 500,
      address: receivingAddress[0],
      tag: 'MYFIRSTVALUETRANSACTION'
    }
    ]
    
```js
    // Construct bundle and convert to trytes
    const trytes = await iota.prepareTransfers(seed, transfers);
    // Send bundle to node.
    const response = await iota.sendTrytes(trytes, 3/*depth*/, 9/*MWM*/);
    

 /home/iotahub/documentation/iota-js/0.1/workshop/listen-for-transactions.md
```bash
    npm install zeromq --save
    
```js
    const zmq = require('zeromq');
    const sock = zmq.socket('sub');
    
```js
    sock.connect('tcp://zmq.devnet.iota.org:5556');
    
```js
    // Check for a command-line argument
    if (!process.argv[2]) {
        // Prompt user to add an address to the commmand line
        console.log('Listening for all transactions')
        console.log('---------------------')
        console.log('If you want to listen for transactions that are sent to a particular address,');
        console.log('pass the address to the `node` command as a command-line argument.');
        console.log('For example: node 6-zmq-listen.js AN...ADDRESS')

        // Subscribe to all transactions that the node receives
        sock.subscribe('tx');
    } else {
        console.log('Listening for transactions sent to this address: ' + process.argv[2])
        console.log(
            'Remember to send a transaction to this address, and be patient: It can take 30seconds for the transaction to appear.')
        // Subscribe to the address thats passed in via the CLI
        sock.subscribe(process.argv[2])
    }
    
```js
    sock.on('message', msg => {
    // Split the data into an array
        const data = msg.toString().split(' ');
        switch (
            // Use index 0 to match the name of the topic
            data[0]
        ) {
            // Display all transactions as the node receives them
            case 'tx': 
                console.log(`I'm a transaction!`, data)
                break
            // Display only transactions that were sent to a given address
            case process.argv[2]: 
                console.log(`I'm the transaction you are looking for!`, data);
                break
        }
    });
    
```shell
    Listening for all transactions
    ---------------------
    If you want to listen for transactions that are sent to a particular address,
    pass the address to the `node` command as a command-line argument.
    For example: node 6-zmq-listen.js AN...ADDRESS
    I'm a transaction! [ 'tx',
    'ZHSNSJFUYIUGPWLK9JZWWQJFHHPIYMYWMXCQPKMUTAYVDNPWYCKAWBXWVFFXOHBKVAUZOKVUCLMEER999',
    'XMBNQGZLNYMNAHFUNBCTYNKKO9IVVDVGIWYQFONUNYUQWPHBIEULTEN9GNYMNWCVPVFBNJFHIZNKJJAUM',
    '0',
    'SEMARKETMAM9999999999999999',
    '1572612274',
    '4',
    '5',
    'JVLVVTESJLCVKSJSGXXKUTBZLEKNRFB9NNSHVHJXBDIHUJRHBXQJQQBLYER9KQRKFLPZI9EVZFFPTTSCX',
    'S9XVKPZDMI9VHLON9BN9FQLIHWZSNGOYAUH9CWBWZFNTWRZYZODT9UHBHNRXAAGFKTBBZRDNROGPHG999',
    'SB9UKUMXQEDETOCOH9CBKVAPDFHFHFDBUKYQBUULKUUTWBBLARBWHTSRLIZSHLDOBCUOPIHXFNODRO999',
    '1572612275265',
    'SEMARKETMAM9999999999999999' ]
    

 /home/iotahub/documentation/iota-js/0.1/workshop/set-up-a-developer-environment.md
```bash
    npm init
    

 /home/iotahub/documentation/iota-js/0.1/workshop/install-packages.md
```bash
    npm install @iota/core @iota/converter --save
    
```shell
    + @iota/converter@1.0.0-beta.8
    + @iota/core@1.0.0-beta.8
    added 19 packages from 10 contributors and audited 68 packages in 5.307s
    found 0 vulnerabilities
    

 /home/iotahub/documentation/iota-js/0.1/workshop/generate-an-address.md
```js
    const Iota = require('@iota/core');
    
```js
    const iota = Iota.composeAPI({
    provider: 'https://nodes.devnet.iota.org:443'
    });
    
```js
    const securityLevel = 2;
    
```js
    const seed =
    'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';
    
```js
    // Generate one address with index 0 and security level 2
    // If the address with the given index is spent, this method returns the next unspent address
    iota.getNewAddress(seed, { index: 0, securityLevel: securityLevel, total: 1 })
        .then(address => {
            console.log('Your address is: ' + address);
        })
        .catch(err => {
            console.log(err)
        });
    
```
    Your address is: WKJDF9LVQCVKEIVHFAOMHISHXJSGXWBJFYEQPOQKSVGZZFLTUUPBACNQZTAKXR9TFVKBGYSNSPHRNKKHA
    

 /home/iotahub/documentation/iota-js/0.1/mam/references/api-reference.md
```javascript
Mam.init(settings, seed, security)

```javascript
Mam.changeMode(state, mode, sidekey)

```javascript
Mam.getRoot(state)

```javascript
Mam.create(state, message)

```javascript
Mam.decode(payload, sideKey, root)

```javascript
Mam.subscribe(state, channelRoot, channelMode, channelKey)

```javascript
Mam.listen(channel, callback)

```javascript
await Mam.attach(payload, address, depth, minWeightMagnitude, tag)

```javascript
await Mam.fetch(root, mode, sidekey, callback, limit)

```javascript
await Mam.fetchSingle(root, mode, sidekey)


 /home/iotahub/documentation/iota-js/0.1/mam/how-to-guides/create-restricted-channel.md
```js
  const Mam = require('@iota/mam');
  const { asciiToTrytes, trytesToAscii } = require('@iota/converter');
  
```js
  const mode = 'restricted'
  const sideKey = 'VERYSECRETKEY'
  const provider = 'https://nodes.devnet.iota.org'

  const mamExplorerLink = `https://mam-explorer.firebaseapp.com/?provider=${encodeURIComponent(provider)}&mode=${mode}&key=${sideKey.padEnd(81, '9')}&root=`
  
```js
  let mamState = Mam.init(provider);
  mamState = Mam.changeMode(mamState, mode, sideKey);
  
```js
  const publish = async packet => {
      // Create MAM message as a string of trytes
      const trytes = asciiToTrytes(JSON.stringify(packet));
      const message = Mam.create(mamState, trytes);

      // Save your new mamState
      mamState = message.state;
      // Attach the message to the Tangle
      await Mam.attach(message.payload, message.address, 3, 9)

      console.log('Published', packet, '\n');
      return message.root
  }
  
```js
  const publishAll = async () => {
    const root = await publish({
      message: 'Message from Alice',
      timestamp: (new Date()).toLocaleString()
    })

    await publish({
      message: 'Message from Bob',
      timestamp: (new Date()).toLocaleString()
    })

    await publish({
      message: 'Message from Charlie',
      timestamp: (new Date()).toLocaleString()
    })

    return root
  }
  
```js
  // Callback used to pass data out of the fetch
  const logData = data => console.log('Fetched and parsed', JSON.parse(trytesToAscii(data)), '\n');

  publishAll()
    .then(async root => {

    const result = await Mam.fetch(root, mode, sideKey)
    result.messages.forEach(message => console.log('Fetched and parsed', JSON.parse(trytesToAscii(message)), '\n'));
  
```js
      console.log(`Verify with MAM Explorer:\n${mamExplorerLink}${root}\n`);
    });
  
```
Published { message: 'Message from Alice',
  timestamp: '9/11/2019, 4:39:32 PM' }

Published { message: 'Message from Bob',
  timestamp: '9/11/2019, 4:39:33 PM' }

Published { message: 'Message from Charlie',
  timestamp: '9/11/2019, 4:39:34 PM' }

Fetched and parsed { message: 'Message from Alice',
  timestamp: '9/11/2019, 4:39:32 PM' }

Fetched and parsed { message: 'Message from Bob',
  timestamp: '9/11/2019, 4:39:33 PM' }

Fetched and parsed { message: 'Message from Charlie',
  timestamp: '9/11/2019, 4:39:34 PM' }

Verify with MAM Explorer:
https://mam-explorer.firebaseapp.com/?provider=https%3A%2F%2Fnodes.devnet.iota.org&mode=restricted&key=VERYSECRETKEY99999999999999999999999999999999999999999999999999999999999999999999&root=DNIBZEUZNILPOZMGVWKKSHUECHFZEPRCMF9WRFPMSBRBKZWFFTTBIUYQNUBYB9NPHGHU9KPVRH9HD9JXO


 /home/iotahub/documentation/iota-js/0.1/mam/how-to-guides/create-mam-webpage.md
```html
    <html>
    <meta charset="utf-8" />

    <head>
        <title>MAM Example Publish and Fetch</title>
    </head>

    <body>
        <div id="output"></div>
    
```html
        <script src="../lib/mam.web.min.js"></script>
    
```html
    <script>
    const TRYTE_ALPHABET = '9ABCDEFGHIJKLMNOPQRSTUVWXYZ';

    const asciiToTrytes = (input) => {
        let trytes = '';
        for (let i = 0; i < input.length; i++) {
            var dec = input[i].charCodeAt(0);
            trytes += TRYTE_ALPHABET[dec % 27];
            trytes += TRYTE_ALPHABET[(dec - dec % 27) / 27];
        }
        return trytes;
    };

    const trytesToAscii = (trytes) => {
        let ascii = '';
        for (let i = 0; i < trytes.length; i += 2) {
            ascii += String.fromCharCode(TRYTE_ALPHABET.indexOf(trytes[i]) + TRYTE_ALPHABET.indexOf(trytes[i + 1]) * 27);
        }
        return ascii;
    };
    
```js
        (async function () {
            const mode = 'public'
            const provider = 'https://nodes.devnet.iota.org'

            const mamExplorerLink = `https://mam-explorer.firebaseapp.com/?provider=${encodeURIComponent(provider)}&mode=${mode}&root=`

            const outputHtml = document.querySelector("#output");

            // Initialize MAM State
            let mamState = Mam.init(provider);

            // Publish to tangle
            const publish = async packet => {
                // Create MAM Payload - STRING OF TRYTES
                const trytes = asciiToTrytes(JSON.stringify(packet))
                const message = Mam.create(mamState, trytes)

                // Save new mamState
                mamState = message.state

                // Attach the payload
                await Mam.attach(message.payload, message.address, 3, 9)

                outputHtml.innerHTML += `Published: ${packet}<br/>`;
                return message.root
            }

            const publishAll = async () => {
                    const root = await publish('ALICE')

                    await publish('BOB')

                    await publish('CHARLIE')

                    return root
            }

            // Callback used to pass data out of the fetch
            const logData = data => outputHtml.innerHTML += `Fetched and parsed ${JSON.parse(trytesToAscii(data))}<br/>`;

            const root = await publishAll();

            // Output asyncronously using "logData" callback function
            await Mam.fetch(root, mode, null, logData)

            // Output synchronously once fetch is completed
            const result = await Mam.fetch(root, mode)
            result.messages.forEach(message => {
                outputHtml.innerHTML += `Fetched and parsed ${JSON.parse(trytesToAscii(message))}<br/>`
            });

            outputHtml.innerHTML += `Verify with MAM Explorer:<br/><a target="_blank" href="${mamExplorerLink}${root}">${mamExplorerLink}${root}</a>`;
            })();
            </script>
        </body>
    </html>
    
```
Published: ALICE
Published: BOB
Published: CHARLIE

Fetched and parsed ALICE
Fetched and parsed BOB
Fetched and parsed CHARLIE


 /home/iotahub/documentation/iota-js/0.1/mam/how-to-guides/create-public-channel.md
```js
  const Mam = require('@iota/mam');
  const { asciiToTrytes, trytesToAscii } = require('@iota/converter');
  
```js
  const mode = 'public';
  const provider = 'https://nodes.devnet.iota.org';

  const mamExplorerLink = `https://mam-explorer.firebaseapp.com/?provider=${encodeURIComponent(provider)}&mode=${mode}&root=`;
  
```js
  let mamState = Mam.init(provider);
  
```js
  const publish = async packet => {
      // Create MAM message as a string of trytes
      const trytes = asciiToTrytes(JSON.stringify(packet));
      const message = Mam.create(mamState, trytes);

      // Save your new mamState
      mamState = message.state;
      // Attach the message to the Tangle
      await Mam.attach(message.payload, message.address, 3, 9)

      console.log('Published', packet, '\n');
      return message.root
  }
  
```js
  const publishAll = async () => {
    const root = await publish({
      message: 'Message from Alice',
      timestamp: (new Date()).toLocaleString()
    })

    await publish({
      message: 'Message from Bob',
      timestamp: (new Date()).toLocaleString()
    })

    await publish({
      message: 'Message from Charlie',
      timestamp: (new Date()).toLocaleString()
    })

    return root
  }
  
```js
  // Callback used to pass data out of the fetch
  const logData = data => console.log('Fetched and parsed', JSON.parse(trytesToAscii(data)), '\n')

  publishAll()
    .then(async root => {

      // Output asyncronously using "logData" callback function
      await Mam.fetch(root, mode, null, logData)

      // Output syncronously once fetch is completed
      const result = await Mam.fetch(root, mode)
      result.messages.forEach(message => console.log('Fetched and parsed', JSON.parse(trytesToAscii(message)), '\n'))
  
```js
      console.log(`Verify with MAM Explorer:\n${mamExplorerLink}${root}\n`);
    })
  
```
Published { message: 'Message from Alice',
  timestamp: '9/12/2019, 10:07:53 AM' } 

Published { message: 'Message from Bob',
  timestamp: '9/12/2019, 10:07:59 AM' } 

Published { message: 'Message from Charlie',
  timestamp: '9/12/2019, 10:08:08 AM' } 

Fetched and parsed { message: 'Message from Alice',
  timestamp: '9/12/2019, 10:07:53 AM' } 

Fetched and parsed { message: 'Message from Bob',
  timestamp: '9/12/2019, 10:07:59 AM' } 

Fetched and parsed { message: 'Message from Charlie',
  timestamp: '9/12/2019, 10:08:08 AM' } 

Fetched and parsed { message: 'Message from Alice',
  timestamp: '9/12/2019, 10:07:53 AM' } 

Fetched and parsed { message: 'Message from Bob',
  timestamp: '9/12/2019, 10:07:59 AM' } 

Fetched and parsed { message: 'Message from Charlie',
  timestamp: '9/12/2019, 10:08:08 AM' } 

Verify with MAM Explorer:
https://mam-explorer.firebaseapp.com/?provider=https%3A%2F%2Fnodes.devnet.iota.org&mode=public&root=9LBMBRUAJIRNASMNJP99ZMNVKNOER9XGVSLJLECEXBTNADHPWGO9FMBRRAGZPKEPSRLJ9SZYQU9EVLMPC


 /home/iotahub/documentation/iota-js/0.1/mam/introduction/overview.md
```bash
    npm install @iota/mam
    
```bash
    yarn add @iota/mam
    
```bash
    cd mam.client.js
    
```bash
    # For the npm package manager
    npm install

    # For the Yarn package manager
    yarn
    
```bash
# For the npm package manager
npm run build-node-dev

# For the Yarn package manager
yarn build-node-dev

```bash
# For the npm package manager
npm run build-node-prod

# For the Yarn package manager
yarn build-node-prod

```bash
# For the npm package manager
npm run build-web-dev

# For the Yarn package manager
yarn build-web-dev

```bash
# For the npm package manager
npm run build-web-prod

# For the Yarn package manager
yarn build-web-prod


 /home/iotahub/documentation/iota-js/0.1/core/how-to-guides/convert-data-to-trytes.md
```js
    var data = "Hello World!";
    
```js
    var trytes = Converter.asciiToTrytes(data);

    console.log(`${data} converted to trytes: ${trytes}`);
    
```js
    var message = Converter.trytesToAscii(trytes);

    console.log(`${trytes} converted back to ASCII: ${message}`);
    
```console
    Hello World! converted to trytes: RBTC9D9DCDEAFCCDFD9DSCFA
    RBTC9D9DCDEAFCCDFD9DSCFA converted back to ASCII: Hello World!
    

 /home/iotahub/documentation/iota-js/0.1/core/how-to-guides/check-transaction-confirmation.md
```js
    iota.getLatestInclusion(['TRANSACTION HASH'])
    .then(states => console.log(states));
    
```js
    iota.getLatestInclusion(['TRANSACTION HASH'])
    .then(states => console.log(states));
    

 /home/iotahub/documentation/iota-js/0.1/core/how-to-guides/confirm-pending-bundle.md
```js
    const tails = ["tail transaction hash"];
    
```js
    var seconds = 0;
    
```js
    var timer = setInterval(stopWatch, 1000);
    function stopWatch (){
    seconds++
    }
    
```js
function autoPromoteReattach (tail) {
  iota.isPromotable(tail)
    .then(promote => promote
    ? iota.promoteTransaction(tail, 3, 14)
        .then(()=> {
            console.log(`Promoted transaction hash: ${tail}`);
        })
    : iota.replayBundle(tail, 3, 14)
        .then(([reattachedTail]) => {
            const newTailHash = reattachedTail.hash;

            console.log(`Reattached transaction hash: ${tail}`);

            // Keep track of all reattached tail transaction hashes to check for confirmation
            tails.push(newTailHash);
        })
    )
    .catch((error)=>{
         console.log(error);
    });
}

```js
function autoConfirm(tails){
console.log(tails);
    iota.getLatestInclusion(tails)
        .then(states => {
            // Check that none of the transactions have been confirmed
            if (states.indexOf(true) === -1) {
                // Get latest tail hash
                const tail = tails[tails.length - 1]
                autoPromoteReattach(tail);
            } else {
                console.log(JSON.stringify(states,null, 1));
                clearInterval(interval);
                clearInterval(timer);
                var minutes = (seconds / 60).toFixed(2);
                var confirmedTail = tails[states.indexOf(true)];
                console.log(`Confirmed transaction hash in ${minutes} minutes: ${confirmedTail}`);
                return;
            }
        }).catch(error => {
            console.log(error);
        }
    );
}


 /home/iotahub/documentation/iota-js/0.1/core/how-to-guides/derive-addresses-from-private-keys.md
```js
    const seed = "PUETTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX";

    var subseed = Sign.subseed(Converter.trytesToTrits(seed), 0 /*index*/);
    
```js
    var privateKey1 = Sign.key(subseed, 1 /*security level*/);

    console.log('Private key length for security level 1: ' + Converter.tritsToTrytes(privateKey1).length);

    var privateKey2 = Sign.key(subseed, 2 /*security level*/);

    console.log('Private key length for security level 2: ' + Converter.tritsToTrytes(privateKey2).length);

    var privateKey3 = Sign.key(subseed, 3 /*security level*/);

    console.log('Private key length for security level 3: ' + Converter.tritsToTrytes(privateKey3).length);
    
```console
    Private key length for security level 1: 2187

    Private key length for security level 2: 4374

    Private key length for security level 3: 6561
    
```js
    var privateKey1Digests = Sign.digests(privateKey1);

    console.log(`Total key digests for security level 1: ` + Converter.tritsToTrytes(privateKey1Digests).length/81);

    var privateKey2Digests = Sign.digests(privateKey2);

    console.log(`Total key digests for security level 2: ` + Converter.tritsToTrytes(privateKey2Digests).length/81);

    var privateKey3Digests = Sign.digests(privateKey3);

    console.log(`Total key digests for security level 3: ` + Converter.tritsToTrytes(privateKey3Digests).length/81);
    
```console
    Total key digests for security level 1: 1

    Total key digests for security level 2: 2

    Total key digests for security level 3: 3
    
```js
    var privateKey1Address = Sign.address(privateKey1Digests);

    console.log('Address with security level 1: ' + Converter.tritsToTrytes(privateKey1Address));

    var privateKey2Address = Sign.address(privateKey2Digests);

    console.log('Address with security level 2: ' + Converter.tritsToTrytes(privateKey2Address));

    var privateKey3Address = Sign.address(privateKey3Digests);

    console.log('Address with security level 3: ' + Converter.tritsToTrytes(privateKey3Address));
    
```console
    Address with security level 1: ZWENNY9JOIQRJIRHV9PCQMCHKBXVZTTKMVRSZSKQNQCQCTZMTMUPEWE9DPCVBVZOVGFFI9JYLTIFXGJAX
    Address with security level 2: ECMHBSFPVUWHSUXZBXTWSKNMBGNTW9GAFVJUUSSJYFBOKHNFJBPEKJNMQMCSAIBXVUJNQKUBFUXPEIY9B
    Address with security level 3: LJGSYD9N9JEAQ9AVN9BJCAOW9LFVZGFHOXFVFVLQEBKVZFGBIDJJIRK9FBJUKRS9VMUXTCXBRIOOEMQJ9
    
```js
    console.log(Iota.generateAddress(seed, 0 /*index*/, 1 /*security level*/));
    console.log(Iota.generateAddress(seed, 0 /*index*/, 2 /*security level*/));
    console.log(Iota.generateAddress(seed, 0 /*index*/, 3 /*security level*/));
    

 /home/iotahub/documentation/iota-js/0.1/core/introduction/overview.md
```bash
    npm install @iota/core
    
```bash
    yarn add @iota/core
    
```bash
    cd iota.js
    
```bash
    npm run init
    
```bash
npm run test


 /home/iotahub/documentation/iota-js/0.1/introduction/overview.md

 /home/iotahub/documentation/client-libraries/home.md

 /home/iotahub/documentation/client-libraries/0.1/doc-index.md

 /home/iotahub/documentation/client-libraries/0.1/introduction/overview.md

 /home/iotahub/documentation/iota-go/0.1/doc-index.md

 /home/iotahub/documentation/iota-go/0.1/account-module/references/cda-advice.md

 /home/iotahub/documentation/iota-go/0.1/account-module/how-to-guides/create-account.md
```go
    package main

    import (
	"github.com/iotaledger/iota.go/account/builder"
    "github.com/iotaledger/iota.go/account/store/badger"
    "github.com/iotaledger/iota.go/account/timesrc"
	"github.com/iotaledger/iota.go/api"
    )
    
```go
    seed := "PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX"
    node := "https://nodes.devnet.iota.org:443"
    
```go
    // API object that connects to a node
    apiSettings := api.HTTPClientSettings{URI: node}
    iotaAPI, err := api.ComposeAPI(apiSettings)
    handleErr(err)
    
```go
    store, err := badger.NewBadgerStore("db")
    handleErr(err)

    // Make sure the database closes
    defer store.Close()
    
```go
    // create an accurate time source (in this case Google's NTP server).
    timesource := timesrc.NewNTPTimeSource("time.google.com")
    
```go
    account, err := builder.NewBuilder().
        // the IOTA API to use
        WithAPI(iotaAPI).
        // the database onject to use
        WithStore(store).
        // the seed of the account
        WithSeed(seed).
        // the minimum weight magnitude for the Devnet
        WithMWM(9).
        // the time source to use during input selection
        WithTimeSource(timesource).
        // load the default plugins that enhance the functionality of the account
        WithDefaultPlugins().
        Build()
    handleErr(err)
    
```go
    handleErr(account.Start())

    // Make sure the account shuts down
    defer account.Shutdown()
    
```go
    nodeInfo, err := iotaAPI.GetNodeInfo()
    handleErr(err)

    fmt.Println("latest milestone index:", nodeInfo.LatestMilestoneIndex)
    fmt.Println("latest milestone index:", nodeInfo.LatestSolidSubtangleMilestone)
    

 /home/iotahub/documentation/iota-go/0.1/account-module/how-to-guides/create-plugin.md
```go
    package main

    import (
        "fmt"

        "github.com/iotaledger/iota.go/account"
        "github.com/iotaledger/iota.go/account/event"
        "github.com/iotaledger/iota.go/account/event/listener"
    )
    
```go
    // NewEventLoggerPlugin ...
    func NewEventLoggerPlugin(em event.EventMachine) account.Plugin {
        return &logplugin{em: em, exit: make(chan struct{})}
    }

    type logplugin struct {
        em   event.EventMachine
        acc  account.Account
        exit chan struct{}
    }
    
```go
    func (l *logplugin) Name() string {
	return "eventLogger"
    }  
    
```go
    func (l *logplugin) Start(acc account.Account) error {
	l.acc = acc
	l.log()
	return nil
    }
    
```go
    func (l *logplugin) Shutdown() error {
        l.exit <- struct{}{}
        return nil
    }
    
```go
    func (l *logplugin) log() {
	lis := listener.NewChannelEventListener(l.em).All()

	go func() {
		defer lis.Close()
	    exit:
            for {
                select {
                case ev := <-lis.Promoted:
                    fmt.Printf("Promoted %s with %s\n", ev.BundleHash[:10], ev.PromotionTailTxHash)
                case ev := <-lis.Reattached:
                    fmt.Printf("Reattached %s with %s\n", ev.BundleHash[:10], ev.ReattachmentTailTxHash)
                case ev := <-lis.SentTransfer:
                    tail := ev[0]
                    fmt.Printf("Sent %s with tail %s\n", tail.Bundle[:10], tail.Hash)
                case ev := <-lis.TransferConfirmed:
                    tail := ev[0]
                    fmt.Printf("Transfer confirmed %s with tail %s\n", tail.Bundle[:10], tail.Hash)
                case ev := <-lis.ReceivingDeposit:
                    tail := ev[0]
                    fmt.Printf("Receiving deposit %s with tail %s\n", tail.Bundle[:10], tail.Hash)
                case ev := <-lis.ReceivedDeposit:
                    tail := ev[0]
                    fmt.Printf("Received deposit %s with tail %s\n", tail.Bundle[:10], tail.Hash)
                case ev := <-lis.ReceivedMessage:
                    tail := ev[0]
                    fmt.Printf("Received msg %s with tail %s\n", tail.Bundle[:10], tail.Hash)
                case balanceCheck := <-lis.ExecutingInputSelection:
                    fmt.Printf("Doing input selection (balance check: %v) \n", balanceCheck)
                case <-lis.PreparingTransfers:
                    fmt.Printf("Preparing transfers\n")
                case <-lis.GettingTransactionsToApprove:
                    fmt.Printf("Getting transactions to approve\n")
                case <-lis.AttachingToTangle:
                    fmt.Printf("Doing proof of work\n")
                case err := <-lis.InternalError:
                    fmt.Printf("Received internal error: %s\n", err.Error())
                case <-l.exit:
                    break exit
                }
            }
        }()
    }
    
```go
    account, err = builder.NewBuilder().
        // Load the IOTA API to use
        WithAPI(iotaAPI).
        // Load the database onject to use
        WithStore(store).
        // Load the seed of the account
        WithSeed(seed).
        // Use the minimum weight magnitude for the Devnet
        WithMWM(9).
        // Load the time source to use during input selection
        WithTimeSource(timesource).
        // Load the EventMachine
        .WithEvents(em)
        // Load the default plugins that enhance the functionality of the account
        WithDefaultPlugins().
        // Load your custom plugin
		Build( NewEventLoggerPlugin(em) )
    handleErr(err)
    

 /home/iotahub/documentation/iota-go/0.1/account-module/how-to-guides/create-and-manage-cda.md
```go
    "time"

	"github.com/iotaledger/iota.go/account/deposit"
	"github.com/iotaledger/iota.go/account/oracle"
	oracle_time "github.com/iotaledger/iota.go/account/oracle/time"
    
```go
    // Get the current time
    now, err := timesource.Time()
    handleErr(err)

    now = now.Add(time.Duration(24) * time.Hour)

    // Specify the conditions
    conditions := &deposit.Conditions{TimeoutAt: &now, MultiUse: true}

    cda, err := account.AllocateDepositAddress(conditions)
    handleErr(err)
    
```go
    bundle, err := account.Send(cda.AsTransfer())
    handleErr(err)

    fmt.Printf("Made deposit into %s in the bundle with the following tail transaction hash %s\n", cda.Address, bundle[0].Hash)
    
```
    Made deposit into DL9CSYICJVKQRUTWBFUCZJQZ9WNBSRJOA9MGOISQZGGHOCZTXVSKDIZN9HBORNGDWRBBAFTKXGEJIAHKDTMAUX9ILA in the bundle with the following tail transaction hash WZEATTRJYENRALJTWPVGDQZHETIDJXPUROUM9BBPS9RJEELDMU9YNZFBSDGPQHZHMXBVCKITSMDEEQ999
    
```go
    threshold := time.Duration(30)*time.Minute
    // timeDecider is an OracleSource
    timeDecider := oracle_time.NewTimeDecider(timesource, threshold)
    // Create a new SendOracle with the given OracleSources
    sendOracle := oracle.New(timeDecider)
    
```go
    // Ask the SendOracle whether we should make a deposit
    ok, rejectionInfo, err := sendOracle.OkToSend(cda)
    handleErr(err)
    if !ok {
        fmt.Println("Won't send transaction: ", rejectionInfo)
        return
    }
    
```go
    // Get the current time
    now, err := timesource.Time()
    handleErr(err)

    now = now.Add(time.Duration(24) * time.Hour)

    // Specify the conditions
    conditions := &deposit.Conditions{TimeoutAt: &now, MultiUse: false, ExpectedAmount: account.AvailableBalance() }

    cda, err := account.AllocateDepositAddress(conditions)
    handleErr(err)
    
```go
    bundle, err := account.Send(cda.AsTransfer())
    handleErr(err)

    fmt.Printf("Made deposit into %s in the bundle with the following tail transaction hash %s\n", cda.Address, bundle[0].Hash)
    
```js
{
   address, // The last 9 trytes are the checksum
   timeout_at,
   multi_use,
   expected_amount
}

```go
    fmt.Println(cda.AsMagnetLink())
    // iota://MBREWACWIPRFJRDYYHAAME…AMOIDZCYKW/?timeout_at=1548337187&multi_use=1&expected_amount=0
    
```go
    cda, err := deposit.ParseMagnetLink(cda.AsMagnetLink())
    handleErr(err)
    

 /home/iotahub/documentation/iota-go/0.1/account-module/how-to-guides/listen-to-events.md
```go
    node := "https://nodes.devnet.iota.org:443"
    seed := "PUETTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX"

    // API object that connects to a node
    apiSettings := api.HTTPClientSettings{URI: node}
    iotaAPI, err := api.ComposeAPI(apiSettings)
    handleErr(err)

    store, err := badger.NewBadgerStore("db")
    handleErr(err)

    em := event.NewEventMachine()

    // Create an accurate time source (in this case Google's NTP server).
    timesource := timesrc.NewNTPTimeSource("time.google.com")

    account, err = builder.NewBuilder().
        // Load the IOTA API to use
        WithAPI(iotaAPI).
        // Load the database onject to use
        WithStore(store).
        // Load the seed of the account
        WithSeed(seed).
        // Use the minimum weight magnitude for the Devnet
        WithMWM(9).
        // Load the time source to use during input selection
        WithTimeSource(timesource).
        // Load the EventMachine
        .WithEvents(em)
        // Load the default plugins that enhance the functionality of the account
        WithDefaultPlugins().
        Build()
    handleErr(err)

    handleErr(account.Start())
    
```go
    lis := listener.NewCallbackEventListener(em)
    lis.RegSentTransfers(func(bun bundle.Bundle) {
		fmt.Println("Outgoing payment is pending")
		fmt.Println("Bundle :", bun)
	})
    lis.RegPromotions(func(promoted *promoter.PromotionReattachmentEvent) {
		fmt.Println("Promoting a pending bundle")
		fmt.Printf("%+v\n", *promoted)
	})
	lis.RegReattachments(func(promoted *promoter.PromotionReattachmentEvent) {
		fmt.Println("Reattaching a pending bundle")
		fmt.Printf("%+v\n", *promoted)
	})
    lis.RegConfirmedTransfers(func(bun bundle.Bundle) {
        fmt.Println("Outgoing payment confirmed")
        fmt.Println("Bundle :", bun)
    })
    lis.RegReceivedMessages(func(bun bundle.Bundle) {
        fmt.Println("Received a new message")
        fmt.Println("Bundle :", bun)
    })
    lis.RegReceivingDeposits(func(bun bundle.Bundle) {
        fmt.Println("Receiving a new payment")
        fmt.Println("Bundle :", bun)
    })
    lis.RegReceivedDeposits(func(bun bundle.Bundle) {
        fmt.Println("Received a new payment")
        fmt.Println("Bundle :", bun)
    })
    

 /home/iotahub/documentation/iota-go/0.1/account-module/how-to-guides/import-seed-state.md
```go
    ID := account.ID()

	acc, err := store.ExportAccount(ID)
	handleErr(err)

    fmt.Println(acc)
    
```go
    jsonacc, err := json.Marshal(acc)
    handleErr(err)
    
```go
    a := Store.ExportedAccountState{}
    err = json.Unmarshal(jsonacc, &a)
	handleErr(err)
    
```go
    store.ImportAccount(a)
    

 /home/iotahub/documentation/iota-go/0.1/account-module/introduction/overview.md
```bash
	go mod init <your-module-path>
	
```bash
	go get github.com/iotaledger/iota.go/account
    go get github.com/iotaledger/iota.go/api
	
```bash
	go get github.com/onsi/ginkgo/ginkgo
	go get github.com/onsi/gomega/...
	
```bash
	cd <dir-of-your-package>
	ginkgo bootstrap
	
```bash
	ginkgo generate <package-name>
	
```bash
	go test -v
	=== RUN   TestAddress
	Running Suite: Address Suite
	============================
	Random Seed: 1542616006
	Will run 11 of 11 specs

	•••••••••••
	Ran 11 of 11 Specs in 0.261 seconds
	SUCCESS! -- 11 Passed | 0 Failed | 0 Pending | 0 Skipped
	--- PASS: TestAddress (0.26s)
	PASS
	ok  	github.com/iotaledger/iota.go/address	0.264s
	
```
	// i req: s, The ASCII string to convert to Trytes.
	// o: Trytes, The Trytes representation of the input ASCII string.
	// o: error, Returned for non ASCII string inputs.
	func ExampleASCIIToTrytes() {
		trytes, err := converter.ASCIIToTrytes("IOTA")
		if err != nil {
			// handle error
			return
		}
		fmt.Println(trytes) // output: "SBYBCCKB"
	}
	

 /home/iotahub/documentation/iota-go/0.1/core/how-to-guides/send-a-transaction.md
```go
package main

import (
	"fmt"
	"github.com/iotaledger/iota.go/address"
	. "github.com/iotaledger/iota.go/api"
	"github.com/iotaledger/iota.go/bundle"
	. "github.com/iotaledger/iota.go/consts"
	"github.com/iotaledger/iota.go/pow"
	"github.com/iotaledger/iota.go/trinary"
)

var endpoint = "<node-url>"

// must be 81 trytes long and truly random
var seed = trinary.Trytes("AAAA....")

// difficulty of the proof of work required to attach a transaction on the tangle
const mwm = 14

// how many milestones back to start the random walk from
const depth = 3

// can be 90 trytes long (with checksum)
const recipientAddress = "BBBB....."

func main() {

	// get the best available PoW implementation
	_, proofOfWorkFunc := pow.GetFastestProofOfWorkImpl()

	// create a new API instance
	api, err := ComposeAPI(HTTPClientSettings{
		URI: endpoint,
		// (!) if no PoWFunc is supplied, then the connected node is requested to do PoW for us
		// via the AttachToTangle() API call.
		LocalProofOfWorkFunc: proofOfWorkFunc,
	})
	must(err)

	// create a transfer to the given recipient address
	// optionally define a message and tag
	transfers := bundle.Transfers{
		{
			Address: recipientAddress,
			Value:   80,
		},
	}

	// create inputs for the transfer
	inputs := []Input{
		{
			Address:  "CCCCC....",
			Security: SecurityLevelMedium,
			KeyIndex: 0,
			Balance:  100,
		},
	}

	// create an address for the remainder.
	// in this case we will have 20 iotas as the remainder, since we spend 100 from our input
	// address and only send 80 to the recipient.
	remainderAddress, err := address.GenerateAddress(seed, 1, SecurityLevelMedium)
	must(err)

	// we don't need to set the security level or timestamp in the options because we supply
	// the input and remainder addresses.
	prepTransferOpts := PrepareTransfersOptions{Inputs: inputs, RemainderAddress: &remainderAddress}

	// prepare the transfer by creating a bundle with the given transfers and inputs.
	// the result are trytes ready for PoW.
	trytes, err := api.PrepareTransfers(seed, transfers, prepTransferOpts)
	must(err)

	// you can decrease your chance of sending to a spent address by checking the address before
	// broadcasting your bundle.
	spent, err := api.WereAddressesSpentFrom(transfers[0].Address)
	must(err)

	if spent[0] {
		fmt.Println("recipient address is spent from, aborting transfer")
		return
	}

	// at this point the bundle trytes are signed.
	// now we need to:
	// 1. select two tips
	// 2. do proof-of-work
	// 3. broadcast the bundle
	// 4. store the bundle
	// SendTrytes() conveniently does the steps above for us.
	bndl, err := api.SendTrytes(trytes, depth, mwm)
	must(err)

	fmt.Println("broadcasted bundle with tail tx hash: ", bundle.TailTransactionHash(bndl))
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}



 /home/iotahub/documentation/iota-go/0.1/core/introduction/overview.md
```bash
	go mod init <your-module-path>
	
```bash
	go get github.com/iotaledger/iota.go/api
	
```go
package main

import (
	. "github.com/iotaledger/iota.go/api"
	"fmt"
)

var endpoint = "<node-url>"

func main() {
	// compose a new API instance
	api, err := ComposeAPI(HTTPClientSettings{URI: endpoint})
	must(err)

	nodeInfo, err := api.GetNodeInfo()
	must(err)

	fmt.Println("latest milestone index:", nodeInfo.LatestMilestoneIndex)
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}

```bash
	go get github.com/onsi/ginkgo/ginkgo
	go get github.com/onsi/gomega/...
	
```bash
	cd <dir-of-your-package>
	ginkgo bootstrap
	
```bash
	ginkgo generate <package-name>
	
```bash
	go test -v
	=== RUN   TestAddress
	Running Suite: Address Suite
	============================
	Random Seed: 1542616006
	Will run 11 of 11 specs

	•••••••••••
	Ran 11 of 11 Specs in 0.261 seconds
	SUCCESS! -- 11 Passed | 0 Failed | 0 Pending | 0 Skipped
	--- PASS: TestAddress (0.26s)
	PASS
	ok  	github.com/iotaledger/iota.go/address	0.264s
	
```
	// i req: s, The ASCII string to convert to Trytes.
	// o: Trytes, The Trytes representation of the input ASCII string.
	// o: error, Returned for non ASCII string inputs.
	func ExampleASCIIToTrytes() {
		trytes, err := converter.ASCIIToTrytes("IOTA")
		if err != nil {
			// handle error
			return
		}
		fmt.Println(trytes) // output: "SBYBCCKB"
	}
	

 /home/iotahub/documentation/iota-go/0.1/introduction/overview.md

 /home/iotahub/documentation/node-software/home.md

 /home/iotahub/documentation/node-software/0.1/doc-index.md

 /home/iotahub/documentation/node-software/0.1/chronicle/references/architecture.md

 /home/iotahub/documentation/node-software/0.1/chronicle/references/api-reference.md
```python
import urllib2
import json

command = {
  "command": "getTrytes",
  "hashes": [
    "SUOESJCXAIDZHGNEJDCFYABGUIOXIVVAHZCZXYWOXDNMGXKM9PEHV9GAMZJWOCVKXVOZUWGZNLZTZ9999"
  ]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:4000", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "getTrytes",
  "hashes": [
    "SUOESJCXAIDZHGNEJDCFYABGUIOXIVVAHZCZXYWOXDNMGXKM9PEHV9GAMZJWOCVKXVOZUWGZNLZTZ9999"
  ]
}

var options = {
  url: 'http://localhost:4000',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:4000 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{ 
"command": "getTrytes",
"hashes": [
  "SUOESJCXAIDZHGNEJDCFYABGUIOXIVVAHZCZXYWOXDNMGXKM9PEHV9GAMZJWOCVKXVOZUWGZNLZTZ9999"
  ]
}'

```json
{
"trytes": [{"address":"JPYUAV9MBDZG9ZX9BAPBBMYFEVORNBIOOZCYPZDZNRGKQYT9HFEXXXBG9TULULJIOWJWQMXSPLILOJGJG","attachmentTimestamp":1567166602904,"attachmentTimestampLowerBound":0,"attachmentTimestampUpperBound":12,"branchTransaction":"OLZDBGOWXCLNZPJZMFUVYPL9COCBSHPIJGIN9L9SNUMMYVZQNDVOCWOYYGJXKHEJGWANXWRBVELB99999","bundle":"VVCRIZWRJ9GOUJRXRBWDEULYKIBIZNKIWGCWZCWVBTVIBAHKVTWLGYQNIZ9JCZJKVEAXABBAUEIGNGWP9","currentIndex":0,"lastIndex":0,"nonce":"JVF9999999RMF99999999999999","obsoleteTag":"HUIWONTO9999999999999999999","signatureMessageFragment":"ODGAHDLDGDNCGDIDRCRCTCTCSCTCSCGADBZAABZACBCBXAABQAGAHDLDGDNCUCPCXC9DTCSCGADB9BBBABQAGAQCPCSCNCQCFDPCBDRCWCGADBVAUAVAZAQAGAQCPCSCNCHDFDIDBDZCGADBVAUAVAZAQAGAQCPCSCNCHDF...","timestamp":1567166602,"trunkTransaction":"BXZWFMSFBAYWJKJUAKWYTUCZRY9GMNETX9MLN9UKRR9ORGRRIENPERNWCLHBCE9XBMYHAMGFYRRL99999","value":0}]
}

```python
import urllib2
import json

command = {
  "command": "findTransactions",
  "hints": [
  {"tag":"POWSRV","month":8,"year":2019, "page_size": 500}
  ]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:4000", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "findTransactions",
  "hints": [
  {"tag":"POWSRV","month":8,"year":2019, "page_size": 500}
  ]
};


var options = {
  url: 'http://localhost:4000',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:4000 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "findTransactions",
  "hints": [
  {"tag":"POWSRV","month":8,"year":2019, "page_size": 500}
  ]
}'

```json
{
  "hashes":["YBOCSXAPQ9ZRKLPZTPUAHIEYZMM9WILR9ELGKMJ9DPKEQLVWHPBPXHDBXVDNBOTHSCLHSKMV9VXWZ9999","Y9CPOZPBICEGGYZUG9ORWDODJLWSFFFMKGVUQWTTWVHAYXO9TTLFLZIPTPVONUGMCVUWCVNM9EQJA9999","..."
  ],
  "hints":[
    {"month":8,"page_size":500,"paging_state":[0,0,0,0,20,1,0,0,32,0,0,0,4,0,0,0,2,0,0,0,73,79,2,0,0,0,84,65,2,0,0,0,7,227,2,0,0,0,0,8,1,136,0,0,0,5,0,0,0,2,0,0,0,73,83,2,0,0,0,65,83,19,0,0,0,67,65,77,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,4,0,0,0,93,105,39,120,81,0,0,0,89,66,79,67,83,88,65,80,81,57,90,82,75,76,80,90,84,80,85,65,72,73,69,89,90,77,77,57,87,73,76,82,57,69,76,71,75,77,74,57,68,80,75,69,81,76,86,87,72,80,66,80,88,72,68,66,88,86,68,78,66,79,84,72,83,67,76,72,83,75,77,86,57,86,88,87,90,57,57,57,57,11,254,255,127,64,75,209,157,39,39,44,67,150,117,165,64,16,45,245,135,1,0,0,0,57,0,0,0,1,25,0,0,0,20,0,0,0,1,0,0,0,8,0,0,0,210,169,0,71,3,23,125,133,1,1,25,0,0,0,20,0,0,0,1,0,0,0,8,0,0,0,210,169,0,71,3,23,125,133,1,1,1,0,0,0,177,75,216,214,96,152,70,193,205,202,198,226,80,81,213,128,1,2],"tag":"POWSRV","year":2019
    }
  ]
}


 /home/iotahub/documentation/node-software/0.1/chronicle/references/design-goals.md

 /home/iotahub/documentation/node-software/0.1/chronicle/references/data-model.md

 /home/iotahub/documentation/node-software/0.1/chronicle/how-to-guides/get-started.md
```bash
    git clone https://github.com/iotaledger/chronicle.git
    cd chronicle
    
```bash
    sudo nano apps/core/config/config.exs
    
```bash
    sudo nano apps/broker/config/config.exs
    
```bash
    {'zmq.iota.org',5556}
    
```bash
    cd ..
    
```bash
    mix deps.get
    
```bash
    mix phx.gen.secret
    
```bash
    mix deps.compile
    mix compile
    
```
SECRET_KEY_BASE=theGenerated64-byteSecretString PORT=4000 HOST=localhost MIX_ENV=prod elixir --name app@hostname --cookie "MySecretChronicleCookie" -S mix run --no-halt

```bash
20:57:18.560 [info] TxFeeder is ready, topic: tx_trytes, host: zmq.iota.org
20:57:18.807 [info] Running ExtendedApiWeb.Endpoint with cowboy 2.6.3 at :::4000 (http)
20:57:18.822 [info] Access ExtendedApiWeb.Endpoint at http://localhost:4000

```bash
    curl http://host:port/api \
    -X POST \
    -H 'Content-Type: application/json' \
    -H 'X-IOTA-API-Version: 1' \
    -d '{
    "command": "getTrytes",
    "hashes": [""]
    }'
    
```json
{
"trytes": [{"address":"JPYUAV9MBDZG9ZX9BAPBBMYFEVORNBIOOZCYPZDZNRGKQYT9HFEXXXBG9TULULJIOWJWQMXSPLILOJGJG","attachmentTimestamp":1567166602904,"attachmentTimestampLowerBound":0,"attachmentTimestampUpperBound":12,"branchTransaction":"OLZDBGOWXCLNZPJZMFUVYPL9COCBSHPIJGIN9L9SNUMMYVZQNDVOCWOYYGJXKHEJGWANXWRBVELB99999","bundle":"VVCRIZWRJ9GOUJRXRBWDEULYKIBIZNKIWGCWZCWVBTVIBAHKVTWLGYQNIZ9JCZJKVEAXABBAUEIGNGWP9","currentIndex":0,"lastIndex":0,"nonce":"JVF9999999RMF99999999999999","obsoleteTag":"HUIWONTO9999999999999999999","signatureMessageFragment":"ODGAHDLDGDNCGDIDRCRCTCTCSCTCSCGADBZAABZACBCBXAABQAGAHDLDGDNCUCPCXC9DTCSCGADB9BBBABQAGAQCPCSCNCQCFDPCBDRCWCGADBVAUAVAZAQAGAQCPCSCNCHDFDIDBDZCGADBVAUAVAZAQAGAQCPCSCNCHDF...","snapshotIndex":null,"tag":"999GOPOW9ATTACHTOTANGLE9ZIG","timestamp":1567166602,"trunkTransaction":"BXZWFMSFBAYWJKJUAKWYTUCZRY9GMNETX9MLN9UKRR9ORGRRIENPERNWCLHBCE9XBMYHAMGFYRRL99999","value":0}]
}


 /home/iotahub/documentation/node-software/0.1/chronicle/introduction/overview.md

 /home/iotahub/documentation/node-software/0.1/iri/concepts/tip-selection.md
```java
Map<TxId -> Integer> calculate(TxId entryPoint)

```java
entryPoint = latestSolidMilestone - depth

entryPointTrunk = entryPoint

entryPointBranch = reference or entry point 

ratings = CumulativeWeightCalculator.calculate(entryPointTrunk)

class CumulativeWeightCalculator(RatingCalculator):

    def calculate(startTx):

        rating = dict()

        subgraph = Tangle(startTx)

        topologicalSubgraph = sortTopologically(subgraph)

        for tx in topologicalSubgraph:

            rating[tx] = len(futureSet(tx)) + 1

        return rating


```java
TxId walk(TxId entryPoint, Map<TxId -> Integer> ratings, WalkValidator validator)

```python
class WalkerAlpha(Walker):

    def walk(entryPoint, ratings, validator):

        step = entryPoint

        prevStep = None

        while step:

            approvers = getApprovers(step)

            prevStep = step

            step = nextStep(ratings, approvers, validator)

        # When there are no more steps, this transaction is a tip

        return prevStep

        

    def nextStep(ratings, approvers, validator):

        approversWithRating = approvers.filter(a => ratings.contains(a))

        # There is no valid approver, this transaction is a tip

        if len(approversWithRating) == 0:

            return None

        approversRatings = approverswithRating.map(a => ratings.get(a))

        weights = ratingsToWeights(approversRatings)

        approver = weightedChoice(approversWithRating, weights)

        if approver is not None:

            tail = validator.findTail(approver)

            # If the selected approver is invalid, step back and try again

            if validator.isInvalid(tail):

                approvers = approvers.remove(approver)

                return nextStep(ratings, approvers, validator)

            return tail

        return None

    

    def weightedChoice(approvers, weights):

        randomNumber = random(0, sum(weights))

        for approver in approvers:

            randomNumber = randomNumber - weights.get(approver)

            if randomNumber <= 0:

                return approver

    def ratingsToWeights(ratings):

        highestRating = max(ratings)

        normalizedRatings = ratings.map(r => r - highestRating)

        weights = normalizedRatings.map(r => math.exp(r * alpha))

        return weights


```python
class WalkValidator:

    previousTransactions = []

    def isInvalid(transaction):

        previousTransactions.append(transaction)

        if notSolid(transaction):

            return True

        if belowMaxDepth(transaction):

            return True 

        if inconsistent(transaction):

            return True

        if inconsistentWithPreviousTransactions(transaction):

            return True

        return False



 /home/iotahub/documentation/node-software/0.1/iri/concepts/transaction-validation.md

 /home/iotahub/documentation/node-software/0.1/iri/concepts/local-snapshot.md

 /home/iotahub/documentation/node-software/0.1/iri/references/data-in-the-ledger.md

 /home/iotahub/documentation/node-software/0.1/iri/references/iri-configuration-options.md

 /home/iotahub/documentation/node-software/0.1/iri/references/api-errors.md

 /home/iotahub/documentation/node-software/0.1/iri/references/data-in-the-snapshot-metadata-file.md

 /home/iotahub/documentation/node-software/0.1/iri/references/api-reference.md
```python
import urllib2
import json

command = {
  "command": "addNeighbors",
  "uris": [
    "tcp://8.8.8.8:14265",
    "tcp://8.8.8.8:14265"
  ]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "addNeighbors",
  "uris": [
    "tcp://8.8.8.8:14265",
    "tcp://8.8.8.8:14265"
  ]
}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "addNeighbors",
  "uris": [
    "tcp://8.8.8.8:14265",
    "tcp://8.8.8.8:14265"
  ]
}'

```json
{
  "addedNeighbors": 2,
  "duration": 125
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = { 
"command": "attachToTangle", 
"trunkTransaction": "VDJJSJVAIQXAUIZOWYLFXVTKFXHNZOGYFRIKBYWD9ZI9NNKYVOLWRJKCXXF9DOXFEGGFWSRVLHVLVADJI",
"branchTransaction": "WXQWVSAJVZLEHQTNFRUBEECZDOJGBRCTUBNDEKDFHKPMTVAQILPTQNG9EEPNEB9PLQZWZAZAKSIJBPG9P",
"minWeightMagnitude": 14,
"trytes": [
  "HOHZUBAFSGNYMOOYGPCKANKOR ...",
  "IOELDJYWAZBKWBTQZYLPTPLIT ..."
  ]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = { 
"command": "attachToTangle", 
"trunkTransaction": "VDJJSJVAIQXAUIZOWYLFXVTKFXHNZOGYFRIKBYWD9ZI9NNKYVOLWRJKCXXF9DOXFEGGFWSRVLHVLVADJI",
"branchTransaction": "WXQWVSAJVZLEHQTNFRUBEECZDOJGBRCTUBNDEKDFHKPMTVAQILPTQNG9EEPNEB9PLQZWZAZAKSIJBPG9P",
"minWeightMagnitude": 14,
"trytes": [
  "HOHZUBAFSGNYMOOYGPCKANKOR ...",
  "IOELDJYWAZBKWBTQZYLPTPLIT ..."
  ]
};

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
"command": "attachToTangle",
"trunkTransaction": "VDJJSJVAIQXAUIZOWYLFXVTKFXHNZOGYFRIKBYWD9ZI9NNKYVOLWRJKCXXF9DOXFEGGFWSRVLHVLVADJI",
"branchTransaction": "WXQWVSAJVZLEHQTNFRUBEECZDOJGBRCTUBNDEKDFHKPMTVAQILPTQNG9EEPNEB9PLQZWZAZAKSIJBPG9P",
"minWeightMagnitude": 14,
"trytes": [
  "HOHZUBAFSGNYMOOYGPCKANKOR ...",
  "IOELDJYWAZBKWBTQZYLPTPLIT ..."
  ]
}'

```json
{
  "trytes": ["OQBOQQOUAWPFCRKELBAS9DHKZ ...", "RGQKNQPXHC9QAVSFDPPFBSKTS ..."],
  "duration": 59
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "broadcastTransactions",
  "trytes": ["P9KFSJVGSPLXAEBJSHWFZLGP ..."]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "broadcastTransactions",
  "trytes": ["P9KFSJVGSPLXAEBJSHWFZLGP ..."]
  }

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "broadcastTransactions",
  "trytes": ["P9KFSJVGSPLXAEBJSHWFZLGP ..."]
  }'

```json
{
  "duration": 567
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "checkConsistency", 
  "tails": [
    "SHHXOGUUYSCCFVMCZYCNBJIMGEEIBEPCCEUXKXF9ROYQNJFFGEHOOHDLNDN9XAWXYBVYYARTPRAFFOJN9",
    "QMMDUXSUOSITO9JVPCJWHIQRVDBPKKZGTSYOKLUNMSM9WIXLLJLFEMKUPEO9MOFDYRDC9GMRRETRGAWJD"
  ]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "checkConsistency", 
  "tails": [
    "SHHXOGUUYSCCFVMCZYCNBJIMGEEIBEPCCEUXKXF9ROYQNJFFGEHOOHDLNDN9XAWXYBVYYARTPRAFFOJN9", 
    "QMMDUXSUOSITO9JVPCJWHIQRVDBPKKZGTSYOKLUNMSM9WIXLLJLFEMKUPEO9MOFDYRDC9GMRRETRGAWJD"
  ]
};

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{ 
"command": "checkConsistency", 
"tails": [
  "SHHXOGUUYSCCFVMCZYCNBJIMGEEIBEPCCEUXKXF9ROYQNJFFGEHOOHDLNDN9XAWXYBVYYARTPRAFFOJN9", 
  "QMMDUXSUOSITO9JVPCJWHIQRVDBPKKZGTSYOKLUNMSM9WIXLLJLFEMKUPEO9MOFDYRDC9GMRRETRGAWJD"
  ]
}'

```json
{
"state":true,
"info":"",
"duration":982
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "findTransactions",
  "addresses": [
    "RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVA"
  ]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "findTransactions",
  "addresses": [
    "RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVA"
  ]
};


var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "findTransactions",
  "addresses": [
    "RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVA"
  ]
}'

```json
{
  "hashes": [
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999", "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999"
  ],
  "duration": 567
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {"command": "getNodeAPIConfiguration"}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {"command": "getNodeAPIConfiguration"}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{"command": "getNodeAPIConfiguration"}'

```json
{
 "maxFindTransactions": 100000,
 "maxRequestsList": 1000,
 "maxGetTrytes": 10000,
 "maxBodyLength": 1000000,
 "testNet": true,
 "milestoneStartIndex": 434525,
 "duration": 1
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "getBalances",
  "addresses": [
    "DE9DVSOWIIIKEBAAHCKBWNXGXTOKVLZPLRAGKZG9GXKFRFWERKBFYMPRLAGVZTRVYPEPHBMUPDMRQ9DPZ"
  ],
  "threshold": 100
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "getBalances",
  "addresses": [
    "DE9DVSOWIIIKEBAAHCKBWNXGXTOKVLZPLRAGKZG9GXKFRFWERKBFYMPRLAGVZTRVYPEPHBMUPDMRQ9DPZ"
  ],
  "threshold": 100
};

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "getBalances",
  "addresses": [
    "DE9DVSOWIIIKEBAAHCKBWNXGXTOKVLZPLRAGKZG9GXKFRFWERKBFYMPRLAGVZTRVYPEPHBMUPDMRQ9DPZ"
  ],
  "threshold": 100
}'

```json
{
  "balances":["197"],
  "references":[
    "GSBROIMQWTOQTFGJHHJPMCZR9DIRN9CQGUBKTGSOQLZRGKFBJFMRIGNGWZDNWKADGMNR9TMLRMLIUZ999"
  ],
  "milestoneIndex":1084812,
  "duration":0
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "getInclusionStates",
  "transactions": [
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999", 
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999"
  ],
  "tips": [
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999", 
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999"
  ]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "getInclusionStates",
  "transactions": [
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999", 
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999"
  ],
  "tips": [
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999", 
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999"
  ]
}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "getInclusionStates",
  "transactions": [
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999", 
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999"
  ],
  "tips": [
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999", 
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999"
  ]
}'

```json
{
  "states": [true, true],
  "duration": 726
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {"command": "getMissingTransactions"}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {"command": "getMissingTransactions"}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{"command": "getMissingTransactions"}'

```json
{
 "hashes": [],
 "duration": 0
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {"command": "getNeighbors"}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {"command": "getNeighbors"}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{"command": "getNeighbors"}'

```json
{
  "neighbors": [{ 
    "address": "/8.8.8.8:14265", 
    "numberOfAllTransactions": 158, 
    "numberOfRandomTransactionRequests": 271,
    "numberOfNewTransactions": 956,
    "numberOfInvalidTransactions": 539, 
    "numberOfStaleTransactions": 663, 
    "numberOfSentTransactions": 672, 
    "connectiontype": "TCP" 
  }],
  "duration": 735
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {"command": "getNodeInfo"}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {"command": "getNodeInfo"}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{"command": "getNodeInfo"}'

```json
{
 "appName": "IRI",
 "appVersion": "1.7.0-RELEASE",
 "jreAvailableProcessors": 8,
 "jreFreeMemory": 2115085674,
 "jreVersion": "1.8.0_191",
 "jreMaxMemory": 20997734400,
 "jreTotalMemory": 4860129502,
 "latestMilestone": "CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999",
 "latestMilestoneIndex": 1050373,
 "latestSolidSubtangleMilestone": "CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999",
 "latestSolidSubtangleMilestoneIndex": 1050373,
 "milestoneStartIndex": 1050101,
 "lastSnapshottedMilestoneIndex": 1039138,
 "neighbors": 7,
 "packetsQueueSize": 0,
 "time": 1554970558971,
 "tips": 9018,
 "transactionsToRequest": 0,
 "features": [
  "snapshotPruning",
  "dnsRefresher",
  "tipSolidification"
 ],
 "coordinatorAddress": "EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9",
 "duration": 0
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {"command": "getTips"}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {"command": "getTips"}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{"command": "getTips"}'

```json
{
  "hashes": [
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999", 
    "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999"
  ],
  "duration": 17
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "getTransactionsToApprove",
  "depth": 4,
  "reference": "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "getTransactionsToApprove",
  "depth": 4,
  "reference": "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY999"
}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "getTransactionsToApprove",
  "depth": 4,
  "reference": "P9KFSJVGSPLXAEBJSHWFZLGP9GGJTIO9YITDEHATDTGAFLPLBZ9FOFWWTKMAZXZHFGQHUOXLXUALY9999"
}'

```json
{
"trunkTransaction":"YXQWAVOYFGGPGAIMVLGMWBPSWLAGDBAVWUXBBTPAUHANQQAKEUAOKOMFHKHCFEGAIG9JPMMGTFUTZ9999",
"branchTransaction":"PHKTCBHQFZGMPJT9ZBCKMPIBZJXF9JYKXKJUHHRJTEIIPFVNNCIGAZUQVOMMFJZKULLQMOYYFEVIZ9999",
"duration":982
}

```json
{"error": "'command' parameter has not been specified"}

```python
import urllib2
import json

command = {
  "command": "getTrytes",
  "hashes": [
    "NGDFRIHOOS9J9YBQCDSFJZJKNSAJTNFKSXXEZWPZQSLRTYQDNX9UCGJHU9OZGFATCCQSGSFUZLLET9LID", 
    "MUIYDLYHCAYGYK9IPVQX9GIHIWWCATAJ9BNFPVKZHZOSXAWVHEHHMSVEVTNRJVGCGEMSNI9ATUXFKPZRQ"
  ]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "getTrytes",
  "hashes": [
    "NGDFRIHOOS9J9YBQCDSFJZJKNSAJTNFKSXXEZWPZQSLRTYQDNX9UCGJHU9OZGFATCCQSGSFUZLLET9LID", 
    "MUIYDLYHCAYGYK9IPVQX9GIHIWWCATAJ9BNFPVKZHZOSXAWVHEHHMSVEVTNRJVGCGEMSNI9ATUXFKPZRQ"
  ]
}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{ 
"command": "getTrytes",
"hashes": [
  "NGDFRIHOOS9J9YBQCDSFJZJKNSAJTNFKSXXEZWPZQSLRTYQDNX9UCGJHU9OZGFATCCQSGSFUZLLET9LID", 
  "MUIYDLYHCAYGYK9IPVQX9GIHIWWCATAJ9BNFPVKZHZOSXAWVHEHHMSVEVTNRJVGCGEMSNI9ATUXFKPZRQ"
  ]
}'

```json
{
"trytes": ["JJSLJFJD9HMHHMKAJNRODFHUN ..."],
"duration":982
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {"command": "interruptAttachingToTangle"}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {"command": "interruptAttachingToTangle"}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{"command": "interruptAttachingToTangle"}'

```json
{
"duration":982
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {"command": "removeNeighbors", "uris": ["tcp://8.8.8.8:14265", "tcp://8.8.8.8:14265"]}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {"command": "removeNeighbors", "uris": ["tcp://8.8.8.8:14265", "tcp://8.8.8.8:14265"]}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{"command": "removeNeighbors", "uris": ["tcp://8.8.8.8:14265", "tcp://8.8.8.8:14265"]}'

```json
{
"removedNeighbors": 2,
"duration":982
}

```json
{"error": "'command' parameter has not been specified"}

```python
import urllib2
import json

command = {
  "command": "storeTransactions",
  "trytes": ["RKDQGFBD9W9VKDEJDEXUNJBAG ..."]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "storeTransactions",
  "trytes": ["RKDQGFBD9W9VKDEJDEXUNJBAG ..."]
}

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{ 
  "command": "storeTransactions",
  "trytes": ["RKDQGFBD9W9VKDEJDEXUNJBAG ..."]
}'

```json
{
"trytes": ["JJSLJFJD9HMHHMKAJNRODFHUN ..."],
"duration": 982
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "wereAddressesSpentFrom",
  "addresses": [
    "BKDEARVZVOWC9LZKTAB9AUSJSHCGVDQQGJUVNWHV9XNICMDFHEZOVLYRJYMHXKZZXSNRZRPYFSUFAFIP9", 
    "JKPNBVXIFLISXOXLSGHFCYIY9WJHHMORXAOWUXTLGCCHCCKEBHVBWSEEMBIYXMIEZ9FCRHFOHJRANSGB9"
  ]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:14265", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "wereAddressesSpentFrom",
  "addresses": [
    "BKDEARVZVOWC9LZKTAB9AUSJSHCGVDQQGJUVNWHV9XNICMDFHEZOVLYRJYMHXKZZXSNRZRPYFSUFAFIP9",
    "JKPNBVXIFLISXOXLSGHFCYIY9WJHHMORXAOWUXTLGCCHCCKEBHVBWSEEMBIYXMIEZ9FCRHFOHJRANSGB9"
  ]
};

var options = {
  url: 'http://localhost:14265',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:14265 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "wereAddressesSpentFrom",
  "addresses": [
    "BKDEARVZVOWC9LZKTAB9AUSJSHCGVDQQGJUVNWHV9XNICMDFHEZOVLYRJYMHXKZZXSNRZRPYFSUFAFIP9", 
    "JKPNBVXIFLISXOXLSGHFCYIY9WJHHMORXAOWUXTLGCCHCCKEBHVBWSEEMBIYXMIEZ9FCRHFOHJRANSGB9"
  ]
}'

```json
{
"states": [true, false],
"duration": 982
}

```json
{
  "error": "'command' parameter has not been specified"
}


 /home/iotahub/documentation/node-software/0.1/iri/references/best-practice.md

 /home/iotahub/documentation/node-software/0.1/iri/references/zmq-events.md

 /home/iotahub/documentation/node-software/0.1/iri/references/troubleshooting.md
```
java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty

```bash
    curl http://localhost:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{"command": "getNeighbors"}'
    

 /home/iotahub/documentation/node-software/0.1/iri/references/.terminology.md

 /home/iotahub/documentation/node-software/0.1/iri/how-to-guides/flink-tangle-stream-processing.md
```bash
  git clone https://github.com/Citrullin/tangle-streaming.git
  git clone https://github.com/Citrullin/flink-tangle-source
  
```bash
  cd tangle-streaming && sbt
  
```bash
  compile
  publishLocal
  
```bash
  cd ../flink-tangle-source && sbt
  
```bash
  compile
  publishLocal
  
```scala
  libraryDependencies += "org.iota" %% "flink-tangle-source" % "0.0.1",
  
```scala
val unconfirmedMessageDescriptorName = UnconfirmedTransactionMessage.scalaDescriptor.fullName
val zeroMQHost = "HOSTNAME|IP"
val zeroMQPort = config.getInt(ConfigurationKeys.ZeroMQ.port)
val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment

val stream = env.addSource(new TangleSource(zeroMQHost, zeroMQPort, ""))

```scala
val stream = env.addSource(new TangleSource(zeroMQHost, zeroMQPort, "tx"))

```scala
val filteredStream = stream
  .filter(_.companion.scalaDescriptor.fullName == unconfirmedMessageDescriptorName)

```scala
val unconfirmedTransactionStream = filteredStream.map(_ match {
        case m: UnconfirmedTransactionMessage => Some(m)
        case _ => None
      })
      .map(_.get)

```scala
val addressOnlyStream = unconfirmedTransactionStream.map(e => (e.address, 1L))

```scala
val keyedStream = addressOnlyStream.keyBy(_._1)

```scala
val keyedTimedWindow = keyedStream.timeWindow(Time.minutes(60), Time.seconds(30))

```scala
val aggregatedKeyedTimeWindow = timedWindow.reduce((a, b) => (a._1, a._2 + b._2))

```scala
val aggregatedKeyedTimeWindow = keyedTimedWindow.aggregate(new AddressCountAggregator)

```scala
class AddressCountAggregator extends AggregateFunction[(String, Long), (String, Long), (String, Long)]
{
  override def add(value: (String, Long), accumulator: (String, Long)): (String, Long) =
    (value._1, value._2 + accumulator._2)

  override def createAccumulator(): (String, Long) = ("", 0L)

  override def getResult(accumulator: (String, Long)): (String, Long) = accumulator

  override def merge(a: (String, Long), b: (String, Long)): (String, Long) = (a._1, a._2 + b._2)
}

```scala
val timeWindowAll = aggregatedKeyedTimeWindow
      .timeWindowAll(Time.seconds(1))

```scala
val mostUsedStream = timeWindowAll.aggregate(new MostUsedAddressesAggregator(10))

```scala
class MostUsedAddressesAggregator(number: Int) extends AggregateFunction[(String, Long), Map[String, Long], List[(String, Long)]]
{
  override def add(value: (String, Long), accumulator: Map[String, Long]): Map[String, Long] = {
    accumulator ++ Map(value._1 -> (value._2 + accumulator.getOrElse(value._1, 0L)))
  }

  override def createAccumulator(): Map[String, Long] = Map()

  override def getResult(accumulator: Map[String, Long]): List[(String, Long)] =
    accumulator.toList.sortWith(_._2 > _._2).take(number)

  override def merge(a: Map[String, Long], b: Map[String, Long]): Map[String, Long] = {
    val seq = a.toSeq ++ b.toSeq
    val grouped = seq.groupBy(_._1)
    val mapWithCounts = grouped.map{case (key, value) => (key, value.map(_._2))}

    mapWithCounts.map{case (key, value) => (key, value.sum)}
  }
}

```scala
mostUsedStream.print()

    // execute program
    env.execute("Most used addresses")


 /home/iotahub/documentation/node-software/0.1/iri/how-to-guides/prune-transactions-from-the-ledger.md

 /home/iotahub/documentation/node-software/0.1/iri/how-to-guides/interact-with-an-iri-node.md
```bash
npm install request --save

```bash
pip install urllib3

```bash
var request = require('request');

var command = {
    'command': 'getNodeInfo'
}

```bash
import json
import urllib3

command = json.dumps({
    "command":"getNodeInfo"
})

```bash
var options = {
url: 'https://nodes.devnet.iota.org:443',
method: 'POST',
headers: {
    'Content-Type': 'application/json',
    'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
},
json: command
};

request(options, function (error, response, data) {
    if (!error && response.statusCode == 200) {
        console.log(JSON.stringify(data));
    }
});

```bash
http = urllib3.PoolManager()

response = http.request('POST', 'https://nodes.devnet.iota.org:443',
                 headers={'Content-Type': 'application/json', 'X-IOTA-API-Version': '1'},
                 body=command)

results = json.loads(response.data.decode('utf-8'))
print(json.dumps(results, indent=1, sort_keys=True))

```json
{
"appName":"IRI Testnet",
"appVersion":"1.5.6-RELEASE",
"jreAvailableProcessors":8,
"jreFreeMemory":9216518096,
"jreVersion":"1.8.0_181",
"jreMaxMemory":51469877248,
"jreTotalMemory":51469877248,
"latestMilestone":"HNRPRXQLEOXFQAAIZTYFBCBJPNENNIGSKAUEDFULYYYYVGSUDWLYZVNZTPTFV9OCP9DAMNVJ9JYMOA999",
"latestMilestoneIndex":1076316,
"latestSolidSubtangleMilestone":"HNRPRXQLEOXFQAAIZTYFBCBJPNENNIGSKAUEDFULYYYYVGSUDWLYZVNZTPTFV9OCP9DAMNVJ9JYMOA999",
"latestSolidSubtangleMilestoneIndex":1076316,
"milestoneStartIndex":434525,
"neighbors":7,
"packetsQueueSize":0,
"time":1548410587420,
"tips":1364,
"transactionsToRequest":0,
"features":["snapshotPruning","dnsRefresher","testnet","zeroMessageQueue","tipSolidification","RemotePOW"],
"coordinatorAddress":"EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM",
"duration":0
}


 /home/iotahub/documentation/node-software/0.1/iri/how-to-guides/set-up-a-reverse-proxy.md
```bash
    sudo apt-get update
    sudo apt-get install nginx
    
```bash
    sudo systemctl disable nginx
    
```bash    
    sudo systemctl enable nginx
    
```bash
    systemctl status nginx
    
```shell
    nginx.service - A high performance web server and a reverse proxy server
    Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)
    Active: active (running) since Mon 2019-02-04 16:14:00 UTC; 4min 2s ago
    Main PID: 12857 (nginx)
    CGroup: /system.slice/nginx.service
            ├─12857 nginx: master process /usr/sbin/nginx -g daemon on; master_process on
            └─12858 nginx: worker process
    
```bash
    sudo nano /etc/nginx/sites-enabled/iri.conf
    
```shell
    # Limit the amount of requests that'll be forwarded from a single IP address to the IRI node (5 per second)
    limit_req_zone              $binary_remote_addr zone=iri:10m rate=5r/s;

    server {

        server_name _;
        # Port that Nginx will listen on
        listen                    5000 default_server deferred;

        location / {
        # Tell Nginx to drop requests to the server if more than 5 are queued from the same IP address
        limit_req               zone=iri burst=5 nodelay;
        
        # IP address of your IRI node. In this case the IRI node is running on the same machine as Nginx
        proxy_pass http://127.0.0.1:14265;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        }
    }
    
```bash
    sudo systemctl restart nginx
    
```bash
    sudo apt install curl jq
    curl -s http://localhost:5000 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{"command": "getNodeInfo"}' | jq
    
```bash
for i in {0..20}; do (curl  http://localhost:5000 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{"command": "getNodeInfo"}') 2>/dev/null; done

```shell
{"appName":"IRI","appVersion":"1.7.0-RELEASE","jreAvailableProcessors":8,"jreFreeMemory":1832921952,"jreVersion":"1.8.0_191","jreMaxMemory":20997734400,"jreTotalMemory":4073869600,"latestMilestone":"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999","latestMilestoneIndex":1050373,"latestSolidSubtangleMilestone":"CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999","latestSolidSubtangleMilestoneIndex":1050373,"milestoneStartIndex":1050101,"lastSnapshottedMilestoneIndex":1050264,"neighbors":7,"packetsQueueSize":0,"time":1554971201776,"tips":7335,"transactionsToRequest":0,"features":["snapshotPruning","dnsRefresher","tipSolidification"],"coordinatorAddress":"EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9","duration":0}<html>
<head><title>503 Service Temporarily Unavailable</title></head>
<body bgcolor="white">
<center><h1>503 Service Temporarily Unavailable</h1></center>
<center>nginx/1.14.0 (Ubuntu)</center>
</body>
</html>

```bash
    sudo nano /etc/nginx/sites-enabled/iri.conf
    
```shell
    # Denies access from an IP address
    deny ipaddress;
    # Allows access from all other IP addresses
    allow all;
    
```bash
    sudo nano /etc/nginx/sites-enabled/iri.conf
    
```shell
    upstream iri {
    
    }
    
```shell
    upstream iri {
    ip_hash;
    }
    
```shell
    upstream iri {
    ip_hash;
    server 127.0.0.3:8000;
    server 127.0.0.3:8001;
    server 192.168.0.1:8000;
    server 192.168.0.1:8001;
    }
    

 /home/iotahub/documentation/node-software/0.1/iri/how-to-guides/run-an-iri-node-in-docker.md
```bash
    docker run hello-world
    
```
    Unable to find image 'hello-world:latest' locally
    latest: Pulling from library/hello-world
    1b930d010525: Pull complete
    Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535
    Status: Downloaded newer image for hello-world:latest

    Hello from Docker!
    This message shows that your installation appears to be working correctly.

    To generate this message, Docker took the following steps:
    1. The Docker client contacted the Docker daemon.
    2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
        (amd64)
    3. The Docker daemon created a new container from that image which runs the
        executable that produces the output you are currently reading.
    4. The Docker daemon streamed that output to the Docker client, which sent it
        to your terminal.

    To try something more ambitious, you can run an Ubuntu container with:
    docker run -it ubuntu bash

    Share images, automate workflows, and more with a free Docker ID:
    https://hub.docker.com/

    For more examples and ideas, visit:
    https://docs.docker.com/get-started/
    
```bash
docker pull iotaledger/iri:latest

```bash
    git --version
    
```bash
    git clone https://github.com/iotaledger/iri.git
    cd iri
    export TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
    git checkout ${TAG}
    docker build -t iri .
    
```bash
    docker run --name iri iotaledger/iri:latest --remote true -p 14265
    
```bash
    curl -s http://localhost:14265 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{"command": "getNodeInfo"}' | jq
    
```json
    {
    "appName": "IRI",
    "appVersion": "1.7.0-RELEASE",
    "jreAvailableProcessors": 8,
    "jreFreeMemory": 2115085674,
    "jreVersion": "1.8.0_191",
    "jreMaxMemory": 20997734400,
    "jreTotalMemory": 4860129502,
    "latestMilestone": "CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999",
    "latestMilestoneIndex": 1050373,
    "latestSolidSubtangleMilestone": "CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999",
    "latestSolidSubtangleMilestoneIndex": 1050373,
    "milestoneStartIndex": -1,
    "lastSnapshottedMilestoneIndex": 1039138,
    "neighbors":0,
    "packetsQueueSize":0,
    "time":1548407444641,
    "tips":0,
    "transactionsToRequest":0,
    "features":["snapshotPruning","dnsRefresher","tipSolidification"],
    "coordinatorAddress": "EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9",
    "duration": 0
    }
    
```bash
    sudo apt install curl jq
    curl -s http://localhost:14265 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{"command": "getNodeInfo"}' | jq
    

 /home/iotahub/documentation/node-software/0.1/iri/how-to-guides/find-neighbor-iri-nodes.md

 /home/iotahub/documentation/node-software/0.1/iri/how-to-guides/update-the-iri.md

 /home/iotahub/documentation/node-software/0.1/iri/how-to-guides/run-an-iri-node-on-linux.md
```bash
    sudo apt-get update
    sudo apt-get upgrade -y
    
```bash
    mkdir /home/jake/node
    
```bash
    sudo add-apt-repository universe
    sudo apt-get install -y software-properties-common --no-install-recommends
    sudo apt-get install openjdk-8-jdk
    sudo apt-get update
    
```bash
    sudo wget -O /home/jake/node/iri-${VERSION}.jar https://github.com/iotaledger/iri/releases/download/v${VERSION}/iri-${VERSION}.jar
    
```
HTTP request sent, awaiting response ... 200 OK
'/home/jake/node/iri-1.6.0-RELEASE.jar' saved [175441686/175441686]

```bash
    sudo apt-get install -y software-properties-common --no-install-recommends
    sudo apt-get install openjdk-8-jdk
    sudo apt-get update
    
```bash
    export MAVEN_VERSION=3.5.4
    export USER_HOME_DIR="/root"
    export SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d
    export BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries
    sudo apt-get update && apt-get install -y --no-install-recommends curl
    sudo mkdir -p /usr/share/maven /usr/share/maven/ref
    sudo curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz

    # Check the sha256 checksum, the output should read 'OK' if the checksum is correct

    echo "${SHA} /tmp/apache-maven.tar.gz" | sha256sum -c -
    sudo tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1
    sudo rm -f /tmp/apache-maven.tar.gz
    export MAVEN_HOME=/usr/share/maven
    export MAVEN_CONFIG="${USER_HOME_DIR}/.m2"
    
```bash
    sudo apt-get update && apt-get install -y --no-install-recommends git
    
```bash
    git clone https://github.com/iotaledger/iri.git
    cd iri

    # Checkout the latest tag

    export TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
    git checkout ${TAG}
    
```bash
    /usr/share/maven/bin/mvn clean package
    
```bash
    export JAVA_OPTIONS="-XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:InitiatingHeapOccupancyPercent=60 -XX:G1MaxNewSizePercent=75 -XX:MaxGCPauseMillis=10000 -XX:+UseG1GC"
    export JAVA_MIN_MEMORY=2G
    export JAVA_MAX_MEMORY=4G
    
```bash
    nano /home/jake/node/config.ini
    
```bash
    mkdir -p /home/jake/node/data
    cd /home/jake/node/data
    
```bash
    java ${JAVA_OPTIONS} -Xms${JAVA_MIN_MEMORY} -Xmx${JAVA_MAX_MEMORY} -Djava.net.preferIPv4Stack=true -jar /home/jake/node/iri-${VERSION}.jar
    
```bash
    java ${JAVA_OPTIONS} -Xms${JAVA_MIN_MEMORY} -Xmx${JAVA_MAX_MEMORY} -Djava.net.preferIPv4Stack=true -jar /home/jake/node/iri-${VERSION}.jar -c /home/jake/node/config.ini
    
```bash
    sudo apt install curl jq
    
```bash
    curl -s http://localhost:14265 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{"command": "getNodeInfo"}' | jq
    
```json
     {
    "appName": "IRI",
    "appVersion": "1.7.0-RELEASE",
    "jreAvailableProcessors": 8,
    "jreFreeMemory": 2115085674,
    "jreVersion": "1.8.0_191",
    "jreMaxMemory": 20997734400,
    "jreTotalMemory": 4860129502,
    "latestMilestone": "CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999",
    "latestMilestoneIndex": 1050373,
    "latestSolidSubtangleMilestone": "CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999",
    "latestSolidSubtangleMilestoneIndex": 1050373,
    "milestoneStartIndex": -1,
    "lastSnapshottedMilestoneIndex": 1039138,
    "neighbors":0,
    "packetsQueueSize":0,
    "time":1548407444641,
    "tips":0,
    "transactionsToRequest":0,
    "features":["snapshotPruning","dnsRefresher","tipSolidification"],
    "coordinatorAddress": "EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9",
    "duration": 0
    }
    
```bash
    sudo apt install curl jq
    curl -s http://localhost:14265 -X POST -H 'X-IOTA-API-Version: 1' -H 'Content-Type: application/json' -d '{"command": "getNodeInfo"}' | jq
    

 /home/iotahub/documentation/node-software/0.1/iri/how-to-guides/install-a-pow-proxy.md
```bash
    go env GOPATH
    
```bash
    git clone https://github.com/luca-moser/iotacaddy.git
    
```bash
    cd iotacaddy/caddy
    
```bash
    # AVX
    go build -tags="pow_avx"
    #SSE
    go build -tags="pow_sse"
    
```bash
    # Set the URL of your PoW proxy server
    127.0.0.1:15265 {

    gzip

    # Log requests to the proxy with rotation
    log requests.log {
        rotate_size 100
        rotate_age  90
        rotate_keep 20
        rotate_compress
        }

    #tls /etc/letsencrypt/live/iota-tangle.io/fullchain.pem /etc/letsencrypt/live/iota-tangle.io/privkey.pem

    # Limit request body to 10 megabytes
    limits 10mb

    # Intercept calls that have a maximum MWM of 14 and include a maximum of 20 transactions per call
    iota 14 20

    # Set up a reverse proxy to your IRI node
    # In this example, we connect to a public Devnet node, but you can also connect to your own node
    proxy / https://nodes.devnet.iota.org:443 {
        header_upstream X-IOTA-API-VERSION 1.4
        header_upstream Access-Control-Allow-Origin *
        }
    }
    
```bash
    Activating privacy features... done.                                                                                             
    [iota interceptor] 2019/06/03 12:56:54 iota API call interception configured with max bundle txs limit of 20 and max MWM of 14   
    [iota interceptor] 2019/06/03 12:56:54 using PoW implementation: SyncAVX                                                                             
    Serving HTTPS on port 15265                                                                                                      
    http://127.0.0.1:15265
    
```js
    // Require the packages
    const Iota = require('@iota/core');
    const Converter = require('@iota/converter');

    // Create a new instance of the IOTA object
    // Use the `provider` field to specify which IRI node to connect to
    const iota = Iota.composeAPI({
    provider: 'http://127.0.0.1:15265'
    });

    const address = 'HELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDHELLOWORLDD';

    const seed = 'PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX';

    const message = Converter.asciiToTrytes('Hello World!');
    const transfers = [
    {
    value: 0,
    address: address,
    message: message
    }
    ];

    iota.prepareTransfers(seed, transfers)
    .then(trytes => {
    return iota.sendTrytes(trytes, 3/*depth*/, 9/*MWM*/)
    })
    .then(bundle => {
    var JSONBundle = JSON.stringify(bundle,null,1);
    console.log(`Bundle: ${JSONBundle}`)
    })
    .catch(error => {
    // Catch any errors
    console.log(error);
    });
    
```
    [iota interceptor] 2019/07/17 11:16:15 new attachToTangle request from 127.0.0.1:63167
    [iota interceptor] 2019/07/17 11:16:15 bundle: SBEKOAJCN9NZOECDIIYYAUBZBTGPEIFLUIGTDU9EGDEVS9TGPTGQLFJAFXZBIHLRWLTAZLALRXOFOPTXB
    [iota interceptor] 2019/07/17 11:16:15 doing PoW for bundle with 1 txs...
    [iota interceptor] 2019/07/17 11:16:15 took 17ms to do PoW for bundle with 1 txs
    

 /home/iotahub/documentation/node-software/0.1/iri/introduction/overview.md

 /home/iotahub/documentation/node-software/0.1/goshimmer/references/command-line-flags.md

 /home/iotahub/documentation/node-software/0.1/goshimmer/how-to-guides/run-the-node.md
```bash
    docker run hello-world
    
```
    Unable to find image 'hello-world:latest' locally
    latest: Pulling from library/hello-world
    1b930d010525: Pull complete
    Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535
    Status: Downloaded newer image for hello-world:latest

    Hello from Docker!
    This message shows that your installation appears to be working correctly.

    To generate this message, Docker took the following steps:
    1. The Docker client contacted the Docker daemon.
    2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
        (amd64)
    3. The Docker daemon created a new container from that image which runs the
        executable that produces the output you are currently reading.
    4. The Docker daemon streamed that output to the Docker client, which sent it
        to your terminal.

    To try something more ambitious, you can run an Ubuntu container with:
    docker run -it ubuntu bash

    Share images, automate workflows, and more with a free Docker ID:
    https://hub.docker.com/

    For more examples and ideas, visit:
    https://docs.docker.com/get-started/
    
```bash
    git clone https://github.com/iotaledger/goshimmer.git
    
```bash
    cd goshimmer
    
```bash
    docker build -t goshimmer .
    
```bash
    sudo docker run -d --rm -p 14666:14666 -p 14626:14626 -p 14626:14626/udp -p 8080:8080 -p 8081:8081 -it -v mainnetdb:/app/mainnetdb goshimmer --node-enable-plugins "spammer zeromq dashboard"
    
```bash
    docker logs -f $ContainerID
    
```bash
    docker attach $ContainerID
    
```bash
    go env GOPATH
    
```bash
    git clone https://github.com/iotaledger/goshimmer.git
    
```bash
    cd goshimmer
    
```bash
    go build -o shimmer
    

 /home/iotahub/documentation/node-software/0.1/goshimmer/how-to-guides/subscribe-to-events.md
```bash
npm install zeromq --save

```bash
pip install pyzmq

```js
const zmq = require('zeromq');
const sock = zmq.socket('sub');

```python
import zmq

context = zmq.Context()
socket = context.socket(zmq.SUB)

```js
sock.connect('tcp://localhost:5556');

```python
socket.connect('tcp://localhost:5556')

```js
sock.subscribe('tx');
console.log("Socket connected");

```python
socket.subscribe('tx')
print ("Socket connected")

```js
sock.on('message', msg => {
    //Split the data into an array
    const data = msg.toString().split(' ');
    for(var i = 0; i < data.length; i++){
        console.log(data[i]);
    }
});

```python
while True:
    print ("Waiting for events from the node")
    message = socket.recv()
    data = message.split()
    print (data)

```shell
tx
YMTMRYBLFPTYCLHAWJVDEZNXITKOW9YMOICXPZVHNHMVLPWLDFYLVAO9XFWICBJCUZAHVQPHINBDXD9NE
999999999999999999999999999999999999999999999999999999999999999999999999999999999
125204
999999999999999999999999999
0
0
0
YMTMRYBLFPTYCLHAWJVDEZNXITKOW9YMOICXPZVHNHMVLPWLDFYLVAO9XFWICBJCUZAHVQPHINBDXD9NE
BLFZJUOBAPWCXTGOCSBVJSXIYOGHN9SUGQEMSUOCUPRK9FXDOONJIOCCSKTBZC9LLBLVSC9BOXEDRE9HY
FXTZC9KKRBWSBYKCOGUDZOZUWHTQWDNMZPZ9SCVYTWVBQNYIXHREHCTP9DEJCR9LHUEHMBIXXGSDQJUUW
1562247720
999999999999999999999999999


 /home/iotahub/documentation/node-software/0.1/goshimmer/how-to-guides/send-spam.md

 /home/iotahub/documentation/node-software/0.1/goshimmer/introduction/overview.md

 /home/iotahub/documentation/node-software/0.1/introduction/overview.md

 /home/iotahub/documentation/iota-java/0.1/doc-index.md

 /home/iotahub/documentation/iota-java/0.1/account-module/references/cda-advice.md

 /home/iotahub/documentation/iota-java/0.1/account-module/how-to-guides/create-account.md
```java
    IotaAPI api = new IotaAPI.Builder()
                    
                    .host("nodes.devnet.iota.org")
                    
                    .port(443)
                    
                    .protocol("https")
                    
                    .timeout(500)
                    .build();
    
```java
    String mySeed = "PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX";
    
```Java
    AccountStore store = new AccountStoreImpl(new MemoryStore());
    
```java
   IotaAccount account = new IotaAccount.Builder(mySeed)
    
                    .store(store)
                    .api(api)
                    .build();
    
```java
    // Create an HTTP node using the default settings
    Connection node = new HttpConnector(
                    "http",
                    "localhost",
                    1337, 
                    // Optional connection timeout
                    500
                );
                    
    // Or create a custom node defined by a class
    Connection customNode = new MyCustomNodeClass();

    // Pass that to the builder
    IotaAPI api = new IotaAPI.Builder()
                    // Enable local proof of work
                    .localPoW(new PearlDiverLocalPoW())
                    // And add the extra nodes
                    .addNode(node)
                    .addNode(customNode)
                    .build();

    

 /home/iotahub/documentation/iota-java/0.1/account-module/how-to-guides/create-plugin.md
```java
public class TestPlugin extends AccountPlugin {

	@Override
	public void load() throws Exception {
		// Load data that the plugin needs such as reading a file, generating memory intensive resources, etc..
	}

	@Override
	public boolean start() {
		// Start any processes that you want to run continuously

		// Return true if all went well, otherwise false
	return true;
	}

	@Override
	public void shutdown() {
		// Stop any running processes here
	}

	@Override
	public String name() {
	return "AwesomeTestPlugin";
	}

	@AccountEvent
	public void confirmed(EventTransferConfirmed e) {
	    System.out.println("account: " + account.getId());
	    System.out.println("confimed: " + e.getBundle().getBundleHash());
	}

	@AccountEvent
	public void promoted(EventPromotion e) {
	    System.out.println("account: " + account.getId());
	    System.out.println("promoted: " + e.getPromotedBundle());
	}
}

```java
public class TestPlugin implements Plugin {

	private Account account;

	@Override
	public void setAccount(Account account) {
	this.account = account;
	}

	@Override
	public Account getAccount() {
	return account;
	}

	@Override
	public void load() throws Exception {
		// Load required data for this plugin. Think of reading storage, generating memory intensive resources, etc..
	}

	@Override
	public boolean start() {
		// Start any processes that you want to have running continuously

		// Return true if all went well, otherwise false
	return true;
	}

	@Override
	public void shutdown() {
		// Stop any running processes here
	}

	@Override
	public String name() {
	return "AwesomeTestPlugin";
	}

	@AccountEvent
	public void confirmed(EventTransferConfirmed e) {
	System.out.println("account: " + account.getId());
	System.out.println("confimed: " + e.getBundle().getBundleHash());
	}

	@AccountEvent
	public void promoted(EventPromotion e) {
	System.out.println("account: " + account.getId());
	System.out.println("promoted: " + e.getPromotedBundle());
	}
}

```java
Plugin myPlugin = new TestPlugin();
IotaAccount account = new IotaAccount.Builder(SEED)
        .plugin(myPlugin)
        .build();


 /home/iotahub/documentation/iota-java/0.1/account-module/how-to-guides/create-and-manage-cda.md
```java
    // In this case, after 72 hours
    Date hours = new Date(System.currentTimeMillis() + 72000 * 60 * 60);
    
    
```java
    Future<ConditionalDepositAddress> cda = account.newDepositAddress(hours, false, 1000).get();
    
```java
    Future<Bundle> bundle = account.send(
            cda.getDepositAddress().getHashCheckSum(),
            cda.getRequest().getExpectedAmount(),
            Optional.of("Thanks for that pizza!"), Optional.of("OMNOMNOM"));
    bundle.get();
    
```java
	Date hours = new Date(System.currentTimeMillis() + 10000 * 60 * 60);
    ConditionalDepositAddress cda = account.newDepositAddress(hours, false, account.availableBalance()).get();
    
```java
    Future<Bundle> bundle = account.send(
            address.getDepositAddress().getHashCheckSum(), 
            address.getRequest().getExpectedAmount(), 
            Optional.of("Sweep of all addresses"),
            Optional.of("IOTA9SWEEP"));
    bundle.get();
    
```js
{
   address, // The last 9 trytes are the checksum
   timeout_at,
   multi_use,
   expected_amount
}

```java
    String magnet = DepositFactory.get().build(cda.get(), MagnetMethod.class);
    
    System.out.println(magnet);
    // iota://YWEQLREFJQORXXKKEBBBDKOPAXHXJRGVPBUTBJFSRPPYVWWYUWSBDJTIUBJVFREXEAUZWRICKH9VBSQE9KPNLTCLNC/?timeout_at=1554472983208&multi_use=false&expected_amount=1000
    
```java
     String magnet = "iota://YWEQLREFJQORXXKKEBBBDKOPAXHXJRGVPBUTBJFSRPPYVWWYUWSBDJTIUBJVFREXEAUZWRICKH9VBSQE9KPNLTCLNC/?timeout_at=1554472983208&multi_use=false&expected_amount=1000";
    ConditionalDepositAddress cda = DepositFactory.get().parse(magnet, MagnetMethod.class);
    Future<Bundle> bundle = account.send(
            cda.getDepositAddress().getHashCheckSum(),
            cda.getRequest().getExpectedAmount(),
            Optional.of("Thanks for that pizza!"), Optional.of("OMNOMNOM"));
    bundle.get();
    

 /home/iotahub/documentation/iota-java/0.1/account-module/how-to-guides/listen-to-events.md

 /home/iotahub/documentation/iota-java/0.1/account-module/introduction/overview.md
```gradle
    allprojects {
        repositories {
            maven { url 'https://jitpack.io' }
        }
    }
    
```gradle
    dependencies {
        compile 'com.github.iotaledger:iota-java:1.0.0-beta3'
    }
    
```xml
    <repositories>
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>
    
```xml
    <dependency>
        <groupId>com.github.iotaledger.iota-java</groupId>
        <artifactId>jota</artifactId>
        <classifier>jar-with-dependencies</classifier>
        <version>[VERSION_INFORMATION]</version>
    </dependency>
    
```bash
    mvn clean install
    

 /home/iotahub/documentation/iota-java/0.1/core/introduction/overview.md
```gradle
    allprojects {
        repositories {
            maven { url 'https://jitpack.io' }
        }
    }
    
```gradle
    dependencies {
        compile 'com.github.iotaledger:iota-java:1.0.0-beta3'
    }
    
```xml
    <repositories>
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>
    
```xml
    <dependency>
        <groupId>com.github.iotaledger.iota-java</groupId>
        <artifactId>jota</artifactId>
        <classifier>jar-with-dependencies</classifier>
        <version>[VERSION_INFORMATION]</version>
    </dependency>
    
```bash
    mvn clean install
    
```java
IotaAPI api = new IotaAPI.Builder()
        .protocol("https")
        .host("nodes.devnet.thetangle.org")
        .port("443")
        .build();
GetNodeInfoResponse response = api.getNodeInfo();

```java
iota.node.protocol=http
iota.node.host=127.0.0.1
iota.node.port=14265


 /home/iotahub/documentation/iota-java/0.1/introduction/overview.md

 /home/iotahub/documentation/wallets/home.md

 /home/iotahub/documentation/wallets/0.1/doc-index.md

 /home/iotahub/documentation/wallets/0.1/trinity/concepts/node-quorum.md

 /home/iotahub/documentation/wallets/0.1/trinity/concepts/hardware-wallet.md

 /home/iotahub/documentation/wallets/0.1/trinity/references/troubleshooting.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/send-a-transaction.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/back-up-seed.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/connect-to-a-custom-node.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/receive-a-transaction.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/manage-your-security-settings.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/perform-a-snapshot-transition.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/read-your-balance.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/outsource-pow.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/create-deep-link.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/create-an-account.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/change-the-general-settings.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/verify-trinity-desktop.md
```
    certUtil -hashfile path\to\trinity-desktop-version.exe SHA256
    
```
    certUtil -hashfile C:\Users\yourname\Downloads\trinity-desktop-0.3.2.exe SHA256
    
```bash
  shasum -a 256 /path/to/trinity-desktop-version.dmg
  
```bash
  shasum -a 256 ~/Downloads/trinity-desktop-0.3.2.dmg
  
```bash
    codesign -d -vv /path/to/Trinity.app
    
```bash
    codesign -d -vv /Applications/Trinity.app
    
```bash
    Identifier=org.iota.trinity
    Authority=Developer ID Application: IOTA Stiftung (UG77RJKZHH)
    Authority=Developer ID Certification Authority
    Authority=Apple Root CA
    
```bash
    spctl -a -vv path/to/Trinity.app
    
```bash
    spctl -a -vv /Applications/Trinity.app
    
```bash
  `sha256sum path/to/trinity-desktop-version.AppImage`
  
```bash
  sha256sum ~/Downloads/trinity-desktop-0.3.2.AppImage
  
```bash
    gpg --import path/to/gpgfile
    
```bash
    gpg --import ~/Downloads/iota.foundation.subkey.trinity.public.gpg
    
```bash
    gpg: key 46A440CCE5664A64: public key "IOTA Foundation (IOTA Foundation Identity) <contact@iota.org>"
    
```bash
    gpg --verify path/to/trinity-desktop-version.AppImage.asc path/to/trinity-desktop-version.AppImage
    
```bash
    gpg --verify ~/Downloads/trinity-desktop-0.3.2.AppImage.asc ~/Downloads/trinity-desktop-0.3.2.AppImage
    
```bash
    gpg: Good signature from "IOTA Foundation (IOTA Foundation Identity) <contact@iota.org>"
    

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/develop-features-on-trinity.md
```bash
    git clone https://github.com/iotaledger/trinity-wallet.git
    
```bash
    cd trinity-wallet
    
```bash
    yarn deps:shared
    
```
sudo apt install build-essential libudev-dev libusb-1.0-0 libusb-1.0-0-dev
sudo apt install gcc-4.8 g++-4.8 && export CXX=g++-4.8

```
yum install build-essential libudev-dev libusb-1.0-0 libusb-1.0-0-dev libusbx-devel gcc-4.8 g++-4.8 && export CXX=g++-4.8

```
    npm install --global windows-build-tools
    
```
    git clone https://github.com/Microsoft/vcpkg C:\src\vcpkg
    cd C:\src\vcpkg
    .\bootstrap-vcpkg.bat
    .\vcpkg install openssl:x64-windows-static
    
```
    npm install --global windows-build-tools
    
```
    git clone https://github.com/Microsoft/vcpkg C:\src\vcpkg
    cd C:\src\vcpkg
    .\bootstrap-vcpkg.bat
    .\vcpkg install openssl:x64-windows-static
    
```bash
    npm run deps:desktop
    
```bash  
    cd src/desktop
    
```bash
    npm run build
    
```bash
    npm run compile:mac
    
```bash
    npm start
    
```bash
    yarn deps:mobile
    
```bash
    cd src/mobile
    
```bash
    cd ios && pod install && cd ..
    
```bash
    yarn ios:dev
    
```bash
    yarn log:ios
    
```bash
    yarn android:dev
    
```bash
    yarn log:android
    
```bash
    git checkout -b feature/my-awesome-new-feature
    
```javascript
    import { withNamespaces } from ‘react-i18next’;
    
```javascript
    const { t } = this.props;
    
```javascript
    <Text>{t(‘helloWorld’)}</Text>
    
```javascript
    export withNamespaces(‘myContainer’)(MyContainer);
    
```json
    "myContainer":{
        "helloWorld": "Hello world!"
    }
    
```bash
rm -rf ~/Library/Application Support/Electron

```bash
Remove-Item –path %APPDATA%/Electron –recurse

```bash
rm -rf ~/.config/Electron


 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/create-a-qr-code.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/manage-your-account.md

 /home/iotahub/documentation/wallets/0.1/trinity/how-to-guides/auto-promote.md

 /home/iotahub/documentation/wallets/0.1/trinity/introduction/overview.md

 /home/iotahub/documentation/wallets/0.1/hub/concepts/sweeps.md

 /home/iotahub/documentation/wallets/0.1/hub/references/grpc-api-reference.md

 /home/iotahub/documentation/wallets/0.1/hub/references/restful-api-reference.md
```python
import urllib2
import json

command = {
  "command": "CreateUser",
  "userId": "user-1"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "CreateUser",
  "userId": "user-1"
};

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "CreateUser",
  "userId": "user-1"
}'

```json
{}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = { 
"command": "GetAddressInfo", 
"address": "PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = { 
"command": "GetAddressInfo", 
"address": "PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF"
};

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
"command": "GetAddressInfo", 
"address": "PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF"
}
}'

```json
{
  "userId": "user-1"
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "GetBalance",
  "userId": "user-1"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "GetBalance",
  "userId": "user-1"
  }

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "GetBalance",
  "userId": "user-1"
  }'

```json
{
  "available": 1000
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "GetDepositAddress", 
  "userId": "user-1"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "GetDepositAddress", 
  "userId": "user-1"
};

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{ 
"command": "GetDepositAddress", 
"userId": "user-1"
}'

```json
{
"address": "PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF"
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "GetStats"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "GetStats"
};


var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "GetStats"
}'

```json
{
  "totalBalance": 10000
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
    "command": "GetUserHistory",
    "userId": "user-1"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
    "command": "GetUserHistory",
    "userId": "user-1"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{"command": "GetUserHistory",
    "userId": "user-1"
}'

```json
{
   "event_0": {
        "userID": "user-1",
        "timestamp": "1563796442000",
        "amount": "1000",
        "reason": "DEPOSIT",
        "sweepBundleHash": "EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY",
        "withdrawalUuid": ""
    },
    "event_1": {
        "userID": "user-1",
        "timestamp": "1563796562000",
        "amount": "-1",
        "reason": "WITHDRAWAL",
        "sweepBundleHash": "",
        "withdrawalUuid": "4782e7d5-9ce4-477d-8fd0-32f5f3385db2"
    },
    "event_2": {
        "userID": "user-1",
        "timestamp": "1563796604000",
        "amount": "1",
        "reason": "WITHDRAWAL_CANCELED",
        "sweepBundleHash": "",
        "withdrawalUuid": "4782e7d5-9ce4-477d-8fd0-32f5f3385db2"
    }
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
 "command": "ProcessTransferBatch",
 "transfers": [{"userId": "user-1","amount": -1},{"userId": "user-2","amount": 1}]
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
    "command": "ProcessTransferBatch",
    "transfers": [{"userId": "user-1","amount": -1},{"userId": "user-2","amount": 1}]
};

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "ProcessTransferBatch",
 "transfers": [{"userId": "user-1","amount": -1},{"userId": "user-2","amount": 1}]
}'

```json
{}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "BalanceSubscription",
  "newerThan": 1563796441000
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "BalanceSubscription",
  "newerThan": 1563796441000
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "BalanceSubscription",
  "newerThan": 1563796441000
}'

```json
{
    "event_0": {
        "type": "USER_ACCOUNT",
        "reason": "DEPOSIT",
        "userId": "user-1",
        "timestamp": "1563796442000",
        "sweepBundleHash": "EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY",
        "withdrawalUuid": "",
	"amount":1000
    },
    "event_1": {
        "type": "USER_ACCOUNT",
        "reason": "WITHDRAWAL",
        "userId": "user-1",
        "timestamp": "1563796562000",
        "sweepBundleHash": "",
        "withdrawalUuid": "4782e7d5-9ce4-477d-8fd0-32f5f3385db2",
	"amount":1000
    },
    "event_2": {
        "type": "USER_ACCOUNT",
        "reason": "WITHDRAWAL_CANCELED",
        "userId": "user-1",
        "timestamp": "1563796604000",
        "sweepBundleHash": "",
        "withdrawalUuid": "4782e7d5-9ce4-477d-8fd0-32f5f3385db2",
	"amount":1000
    },
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
    "command": "RecoverFunds",
    "userId" : "user-1",
    "address":"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF",
    "payoutAddress": "LEYNSIMADMXAUYRGXKKEXPHDMZLRISZBSRZXUMCIKP9JQDOXSCIUGKYFFNPPVPGCHEJAWWSDHCKGOORPCX9WQZZEHY",
    "validateChecksum": "true"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
    "command": "RecoverFunds",
    "userId" : "user-1",
    "address":"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF",
    "payoutAddress": "LEYNSIMADMXAUYRGXKKEXPHDMZLRISZBSRZXUMCIKP9JQDOXSCIUGKYFFNPPVPGCHEJAWWSDHCKGOORPCX9WQZZEHY",
    "validateChecksum": "true"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{"command": "RecoverFunds",
    "userId" : "user-1",
    "address":"PHWYPQECJDVEZYQFIDNMEDFGETLTRUFUERVUYQQLZHOHKQZU9QLLCGLNANXNGGXNTZLBUAALRLH9PIGHF",
    "payoutAddress": "LEYNSIMADMXAUYRGXKKEXPHDMZLRISZBSRZXUMCIKP9JQDOXSCIUGKYFFNPPVPGCHEJAWWSDHCKGOORPCX9WQZZEHY",
    "validateChecksum": "true"
}'

```json
{}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
    "command": "SignBundle" ,
    "address" : "LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBD",
    "bundleHash": "EGEDXKAOPIDYOZRFZWNH9VWKYULBQWAUDFHDZE9YFIXRZARLUIUGACCPYVWUYIRYKGIBLJYEDXBFUNKAW"
    "validateChecksum": "true"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
    "command": "SignBundle" ,
    "address" : "LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBD",
    "bundleHash": "EGEDXKAOPIDYOZRFZWNH9VWKYULBQWAUDFHDZE9YFIXRZARLUIUGACCPYVWUYIRYKGIBLJYEDXBFUNKAW"
    "validateChecksum": "true"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
    "command": "SignBundle" ,
    "address" : "LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBD",
    "bundleHash": "EGEDXKAOPIDYOZRFZWNH9VWKYULBQWAUDFHDZE9YFIXRZARLUIUGACCPYVWUYIRYKGIBLJYEDXBFUNKAW"
    "validateChecksum": "true"
}'

```json
{
  "signature": "DRFFHLSWJBLEBNHXMSLIGUKBQJIJRNHGMGVDFKKPF9DYABMQXDVLWPHXT9LEPSXVBIYKZEWCT9U99NJ9DQJVJJMBGCUHTZQBCYWEIN9DCSDPJXRKGQQBEHPBZZWRFNBIENYV9UNSSNXZHGATAWRTHEW9FQVTXUJLFCQEPLVWATFRXFAUSNFKVVYFISDULSVIQNEQVPNIKZSBJQHWAZMGOIPZSKY9QDVMCFXUS9UGUDK9BOZFAWXQFHFBEYUJBESIFMBWNXVFCKHTGXTWKLSMZ9FHYFUZKE9GTLFWXPCLFPQKCJQAZFSTGWJILTACIXLRRJWDGIGJOCTUCEBFLWFQBQKAHTJMAEWZSDMOTQ9GPALHYYRGTFYJCDRFKZFUPECKUEVZJPVQDYIDJAIHSFSWZSQLQIJSCKJPJPLFVHXLUMLZKUHJWRVPBIOESDIFCUCKZAGANIATOUCSF9IOUA9EQWCSOFMETZEADESOADJGLCDKUQIBEPMXBWNIHJMJHCYUSM9LXMEBTHORZDGYST9VJLUUSXTSAURNUZAUPNWIUSRVL9KGFCEIAIWTNIH9BIRCSLWDAPXYKSZAOFERYFGPBWYUIEEENGMMYVPRRRIXULRJWJCLUBBNMNLFMNPYDHVBFZUFRCD9PCZAQLDBJFFKGQJW9LFUUPIZPKUCBAJFUEUTMXKWUKFXKQISDXYIHEJSQTCEHVABAUWGGANWZCNBOLGZDCLXSZIUKRMFG9THEZTULVZ9CFGNUWCTQVSACVYSZASONJIGUSXZAZNVCBIWRHLOKCXPXFONAWNMWRMGAXXJNPYRNDKAKIEWNSDRSNTSTMDPUYNPSIJTWERECFKSNTWOKCMDIUEKEYXORVIQVQXKWOWNMVBLWVJIWBWKAHHECGLNZAADFVSATZDMLYXBGRCEATLTCMQACYQQDQOXXMSUWSZVZKEXQUYM9DZMMOMBIVCPJU9UUKAXOSQQX9QRPTFXSZPBZFFJLGOBVZZOT9LNWMA9LTRUZUJBDGH9GILESQLNYDYPCHHYICVMAPDVDILEOZDNZMVSERSDWLZ9ZXFKJXISY9BLXZZ9DJYIRPXNLGAWMDZOXOWBUDZRUROHKPREZJTXNSUNC9LDHGFLGYOXBAQVGYUZXECCKUUFOPSLPH9QRLAZUOWGBQBVEJBAZKUEWSUIVGLEULZKDXFQSGQNZYXXZCYPRZUSBPMVPLWMYDWEGXANNXLOTME9HQGQW9POKCSQWHLHUUUWNFFHXZYDYUYBMSJVWSAKMEFJDJNJZHIYP9NBLFWVKBSDIUXLAVLMYLLCRX9BZZZQEESERVDIHKKPVAM9UEOXR9CFW9OAXLCLMJHWEOSTCYYHPWHJZEKAXPBGNGVMCGNHOUWMJX9GEV9BBGYVNEG9AXSNPFEGOZNZWXMNXVV9CVJ9Z9DGLYOUWZKFJYIIWRUEYPGDFSJGRXZDS9RKFELFVMASCAPXVCPLNQRJHADACOOGGHOVTTG9DCOCMHTMTMNEVASXHKLBAWKNFTFDAEEHATXGUKBRLDXNLSHZEPO9OZQBSHJRLGLNPKHAX9WRMYARVJETYAPO9SUWZQHAKJAUWBIWQDSQ9FWIEWSJWKQGNIFGGVKZLWZZOVVBGPNRTONMZDLJHGWQUSCILYOBG9YUUUZDXILKBIQ9ZEKXEHURJLFMDB9CUZI9TEJSQZYHMNTX9F9GJBZ9UJNCKZVYAROOVZYZURRWKLYHJEMZDQLH9FWODFZUEZRV9DWNZCOMXNXFWCPCZQDGFP9DKJYUNXIYIRUVWRSWWIGKZWITSYIVEOPHBJGSZNYJSFTXAKLENHCPGOYQSGEZQMRVNFGAGZXFG9GYFIBJRVU9MYDSZSTJQVVODQJJEHYJYCHOHTCOPZJVGMBEIIGYFMNAPZATAHQGFVWSGYODTOHRE9FVYXSLESASDMMAPBZZVPLIWGIRORAGWNFA9JPSUWJCTNBYRDJANSYMNDGQJNSFQRSVMRIAXDWQONWSAYUYFXJUTWYLPXVV9YGJBMQUXODSEFAEGYXSYYEQTVRAWNCKKSWPRYYINMBOBNZJSANFLKDFMGTNUDU9SFQRBUJM9XDNWIECTJPEICLVXTMCMGQJT9BTRZ9HQCHHBYXSPJBGTSTJDIOUQ9SLRVHTENSCLLGBFMXOYFKYB9SAKWTPGHEXPU9ERFYGEMEPSLJUPRJNRRWQLA9XVSWBEGJHLLDXGDTESDPRBRQHLCIOPWBDYJVCLOHHDYFNQSXBOVUVICSVBMEZYJJZHGDKAHFRJHBDWUSFSGC9UCLVH9ZNVMPYMRMMJTSWAFDRGNALYLRRVPLGMMKGZR9LXEV9ZXRPFKYDBLIUEVEJKVDANOBKFLRSWQPMOMTEJA9WVHFGBNTAJIPWNUWKJMQAOKBCACLYGRCBZRVFKIOMCXYXGUTNODHMLOZRETEPDONTAPVQEQAWCAH9CSTPYRFUXPKBDVONWFNOZHA9N9YUTEIGAHAPEKNWGCXNAMVJVLPCAPDPNTVVSKROYWXDKVLOAHPCCJBGBPSMQEDFDXSGNMIMLEZPBVCKYKVZFFIZVECYQKQWDHXRVEAOL9QIDZK9JFBRYL9JOSAWMBZAXJWNBTLKRSIYHZEILOPRZVLOFACJGIPABPFZILVQMUAYMPABXEBDYOSYBZKUXCFVXUEQJJOUDMBZZGOBVBF9N9ENHSCTDVFASKXHOLLFYMMWSDFHJKHODXYPWMEOQZKIECIBHYXF9PXZOCBMIBI9PLVDVBGALAWBT9FLIZWRNENVLSUCSOATNVRUKTTWZNTZRCMTLALKYGOUKVSO9BBUDVUCFCIKQZWJIUBMXTSNQSFRETWAHPQ9MTYOUKX9BLA9QUUHPNLNINNIPWQVUPUCXHTMURNWYSUGOKWPYMZ9ILDJWEOD9D99YWKQTKKOOWQOLEZMTZ99AYQPWUVVZUNVORK9XRAE9GQSHLVIZLCEDWHSWYNVZKELOI9AVGUWFSJYHA9WZNVNZYFEZYJAXKUOPINHR9OEN9NVLNIDEJLPLVEMIANSGFXXXL9IKQAFLFPOPWO9SAEMNETZMUM9NEHAA9JOGLHOBHYHXASFWHGNKCRNWZSCDPIFGFHOFLWCOMNCPRBECDEVSNXGKNF9IOYIVZRBJJHCREKOFHMTXXALIWOGOZRIJITCWGKQKCVUPUOFNMEUGSVPYAKRORXQHUXJVCAEWJBLAPDDSCIYMODOMM9GWQSVQUBGBUUDVGSSHAONRHVMILHPMBHKKHUTRZFWNAEEUHCQUGHLSVXAMOGVTXELPGKXBHELPCGYRCLMYGIZYLANN9LSXCQVQPBLIZXJUVRTA9CQAFSWWTIBILERJDTYHJWDPOYHNCHJEWSVXEJCPZVNVLWWOAZHJLLTS9WAEXXSMWHITJYJLFHGGDFNYIGDKJFUZGSJDCXSVNZQYUSAPVJRHSRNLNQDLDBEFPLRXJ9MIZBPNBZVHHLOYC9VYLDKNJAHLNPRCSOZKHWHQKXYWXABCPHYNQYRZJEARZCOLQMBCJCHNNSFGORUOHFOFJMF9MJHHFFVBCS9QITDPGXTJKDDJKHGBOLEVMXRAWUMCXUABILEYVHRTZFFMAM9REMUPNEPUHKWFHOJEFBLXXYHI99UDFMXLXEFWQLPTKJJQEQAXYCQNCZMMOTSKGQCJNFCWGUISHWZLDWJBNNAFDDOMOJ9QRVDEXXNHLKVP9CQJSGZRT9CHDTUJIXWM9WB9RTYQ9EEIJWEVSGKQPFLKG9HKNWSGWZUAGOBENKKT9NUMUIAPWZ9UESGRDITJSOMJAPHIN9CJSSUJCAKCLTQPJOUEMKVLSZZ9MAEROPNSBHPHOFBVVOSNTWPSCRTAYQJQSG9YXPRMAHREBCQKMRFISYDXXNRMGEHCXFNH9SAGFOYAHFCQRNQFRXDIJAIBIRPBNVQZLZNJHBVCZHOIHJURHCFFVHFCPBSKGLQOCXKWXSFINGLYQAH9YGPFWJGQDOUIMFJJOFGNDREMEIMDKOEQONGHTVYWVXWHQQOJGCM9YEHBCVWNJLJXK9HQB9BDYTUJVTHYU9R9DPMUHTLB9NGFEEVKIUANTFHUQRRK9LSSFMUBZLKJTJLPQLBEUSVAFJURBSGFNMBZCDKEUTCNYHBZPUCZGQDAP9JISCORGZVTMLCFRDHKJBCEOYOHEHUDTHMGHMFDTPKGNQPCIBTSOCISWKFSMPDVUKPAWVACALATUSWJTJPXHJWUFDEICUNUDSHGYEGRPMDRABLMFCHXNUA9LHNUMDKXH99XGJKU9XMUXFOXKWLI9AFNDD9CSETSFB9MLEMEY9UMHQQYROBZZEBGHRQRERMHILEVEGNOBSFUIIIJZHRFPOBXHGRSXPYEC"
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
    "command": "SweepDetail",
    "bundleHash" : "EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
    "command": "SweepDetail",
    "bundleHash" : "EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
    "command": "SweepDetail",
    "bundleHash" : "EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY"
}'

```json
{ 
    "confirmed": "false",
    "trytes": "...SOMETRANSACTIONTRYTES...",
    "trytes": "...SOMETRANSACTIONTRYTESFORREATTACHMENTTRANSACTION...",
    "tailHash": "G9POQLBHRQZOZUV9XEROHSANPAIMHUQORSFQFRJM9JGUXHOHORDFWNTNUDWDCKXPUPJKXZDEBHXDDN999",
    "tailHash": "EOBRJDZTYTAXIMSEPXUWPZJBRMPJENHCFXLJGSHGIESTCQOGSGQLNOKTDYE9VKCAAGGINGKTEDYWYD999",
    "tailHash": "ATVRPYELRHPUHBAL9CSTQEJFEQCSENDNGF9AXHEFCYFJTAMQFUPPPPSVFXXXHPTQCAJJCEYJGVBARW999"
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
    "command": "SweepInfo",
    "requestByUuid": "false",
    "bundleHash" : "EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
    "command": "SweepInfo",
    "requestByUuid": "false",
    "bundleHash" : "EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
    "command": "SweepInfo",
    "requestByUuid": "false",
    "bundleHash" : "EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY"
}'

```json
{
    "bundleHash": "EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY",
    "timestamp": "1567577007000",
    "withdrawalUuid": "4782e7d5-9ce4-477d-8fd0-32f5f3385db2",
    "withdrawalUuid": "6784e7d5-9fe4-477d-8fd0-32f5f3785de2"
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
  "command": "SweepSubscription",
  "newerThan": 1563796441000
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "SweepSubscription",
  "newerThan": 1563796441000
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "SweepSubscription",
  "newerThan": 1563796441000
}'

```json
{
    "event_0": {
        "bundleHash": "EWLCW9FFLSBUGZZOOLFQLTRJFKNGPUVCIOCQYTSDOSZLBCBJIIJZGPALGAKKANBTDYOBVQFOJHA9OVFOY",
        "timestamp": "1563796442000",
        "withdrawalUuid": []
    },
    "event_1": {
        "bundleHash": "AJINYQCLKFYOCFWFLPESXAQGXYSZCHILJ9ZZCTNQOUGOFGTIOAXYZBCEWEXWDGAFFXBOXZJAPAUHVAZEC",
        "timestamp": "1567537268000",
        "withdrawalUuid": []

    },
    "event_2": {
        "bundleHash": "GOHZXSDAFYDJTJ9GZKKCBAFFKDCTFGFIYDXADGUH9SJGFYPGIOWXEOJXOYSIGYANNWXEII9KSKUZZCHGX",
        "timestamp": "1567537470000",
        "withdrawalUuid": []
    }
}

```json
{"error": "'command' parameter has not been specified"}

```python
import urllib2
import json

command = {
  "command": "UserWithdraw" ,
  "userId" : "user-1",
  "amount": 1,
  "payoutAddress": "LFABJNKAKJVXYH9OPVZ9HJFOPOHDAGKOHZSRWHSNXYBHCYWQDHGRVKPFBLSGRZUOBL9DUBCKI9DWSPEJC"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
  "command": "UserWithdraw" ,
  "userId" : "user-1",
  "amount": 1,
  "payoutAddress": "LFABJNKAKJVXYH9OPVZ9HJFOPOHDAGKOHZSRWHSNXYBHCYWQDHGRVKPFBLSGRZUOBL9DUBCKI9DWSPEJC"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{ 
    "command": "UserWithdraw" ,
    "userId" : "user-1",
    "amount": 1,
    "payoutAddress": "LFABJNKAKJVXYH9OPVZ9HJFOPOHDAGKOHZSRWHSNXYBHCYWQDHGRVKPFBLSGRZUOBL9DUBCKI9DWSPEJC"
}'

```json
{
    "uuid": "50485062-f5f0-4cac-bad6-bb0362ae5138"
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
    "command": "UserWithdrawCancel" ,
    "uuid": "50485062-f5f0-4cac-bad6-bb0362ae5138"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
    "command": "UserWithdrawCancel" ,
    "uuid": "50485062-f5f0-4cac-bad6-bb0362ae5138"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
    "command": "UserWithdrawCancel" ,
    "uuid": "50485062-f5f0-4cac-bad6-bb0362ae5138"
}'

```json
{
"success":true
}

```json
{
  "error": "'command' parameter has not been specified"
}

```python
import urllib2
import json

command = {
    "command": "WasAddressSpentFrom",
    "address" : "LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBDXKSTGPYPA",
    "validateChecksum": "true"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
    "command": "WasAddressSpentFrom",
    "address" : "LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBDXKSTGPYPA",
    "validateChecksum": "true"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
    "command": "WasAddressSpentFrom",
    "address" : "LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBDXKSTGPYPA",
    "validateChecksum": "true"
}'

```json
{
"wasAddressSpentFrom": "true"
}

```json
{"error": "'command' parameter has not been specified"}

```python
import urllib2
import json

command = {
    "command": "WasWithdrawalCancelled",
    "uuid": "c10e6d8f-1f7c-4fdc-b21d-2e533870be6e"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

var command = {
    "command": "WasWithdrawalCancelled",
    "uuid": "c10e6d8f-1f7c-4fdc-b21d-2e533870be6e"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
    "command": "WasWithdrawalCancelled",
    "uuid": "c10e6d8f-1f7c-4fdc-b21d-2e533870be6e"
}'

```json
{
"wasCancelled": true
}

```json
{"error": "'command' parameter has not been specified"}


 /home/iotahub/documentation/wallets/0.1/hub/references/database-tables.md

 /home/iotahub/documentation/wallets/0.1/hub/references/troubleshooting.md

 /home/iotahub/documentation/wallets/0.1/hub/references/command-line-options.md

 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/install-hub.md
```bash
	docker network create hub
	
```bash
	docker run \
	-d \
	--name mariadb \
	--rm \
	--hostname mariadb.local \
	--net=hub \
	-e MYSQL_ROOT_PASSWORD=myrootpassword \
	-e MYSQL_USER=hubuser \
	-e MYSQL_PASSWORD=hubpassword \
	-e MYSQL_DATABASE=hubdb \
	-v ~/db-conf:/conf \
	-v ~/db-data:/var/lib/mysql \
	mariadb/server:10.3
	
```bash
	git clone https://github.com/iotaledger/hub.git
	
```bash
	docker exec -it mariadb /bin/bash
	
```bash
	mysql -h127.0.0.1 -uroot -pmyrootpassword hubdb < conf/schema.sql
	
```bash
	mysql -h127.0.0.1 -uroot -pmyrootpassword hubdb < conf/triggers.mariadb.sql
	
```bash
docker run \
-d \
--rm \
--name hub \
--net hub \
--hostname hub.local \
-p 50051:50051 \
--expose 50051 \
iotacafe/hub:9ccb094 \
--salt REPLACEWITHYOURSAFESALT \
--apiAddress 127.0.0.1:14265  \
--db hubdb \
--dbHost mariadb \
--dbPort 3306 \
--dbUser hubuser \
--dbPassword hubpassword \
--minWeightMagnitude 14 \
--listenAddress 0.0.0.0:50051 \

```shell
docker run \
-d \
--rm \
--name hub \
--net hub \
--hostname hub.local \
-p 50051:50051 \
--expose 50051 \
iotacafe/hub:9ccb094 \
--salt REPLACEWITHYOURSAFESALT \
--apiAddress 127.0.0.1:14265  \
--db hubdb \
--dbHost mariadb \
--dbPort 3306 \
--dbUser hubuser \
--dbPassword hubpassword \
--minWeightMagnitude 14 \
--listenAddress 0.0.0.0:50051 \
--serverType http

```shell
docker run \
-d \
--rm \
--name hub \
--net hub \
--hostname hub.local \
-p 50051:50051 \
--expose 50051 \
iotacafe/hub:9ccb094 \
--salt REPLACEWITHYOURSAFESALT \
--apiAddress nodes.devnet.iota.org:443  \
--db hubdb \
--dbHost mariadb \
--dbPort 3306 \
--dbUser hubuser \
--dbPassword hubpassword \
--listenAddress 0.0.0.0:50051 \
--useHttpsIRI true

```bash
docker ps

```
CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                      NAMES
0a7fe9d77bfb        iotacafe/hub:9ccb094   "/app/hub/hub --salt…"   18 minutes ago      Up 18 minutes       0.0.0.0:50051->50051/tcp   hub
cdd1be234729        mariadb/server:10.3    "docker-entrypoint.s…"   25 minutes ago      Up 25 minutes       3306/tcp                   mariadb

```bash
	sudo apt update 
	sudo apt upgrade
	
```bash
	sudo apt install -y gcc-7
	
```bash
	sudo apt install -y pkg-config zip g++ zlib1g-dev unzip python
	
```bash
	wget https://github.com/bazelbuild/bazel/releases/download/0.29.1/bazel-0.29.1-installer-linux-x86_64.sh
	
```
	HTTP request sent, awaiting response ... 200 OK
	
```bash
	chmod +x bazel-0.29.1-installer-linux-x86_64.sh
	
```bash
	./bazel-0.29.1-installer-linux-x86_64.sh --user
	
```BASH
	PATH="$PATH:$HOME/bin"
	
```bash
	sudo apt install -y python-pyparsing
	
```bash
	sudo apt install -y git
	
```bash
	sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
	
```bash
	sudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://ftp.utexas.edu/mariadb/repo/10.3/ubuntu bionic main'
	
```bash
	sudo apt update
	
```bash
	sudo apt install mariadb-server
	
```bash
	mysql --version
	
```shell
mysql  Ver 15.1 Distrib 10.3.10-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2

```bash
	git clone https://github.com/iotaledger/hub.git
	
```bash
	cd hub
	
```bash
	bazel build -c opt //hub:hub
	
```shell
	Target //hub:hub up-to-date:
		bazel-bin/hub/hub
	INFO: Elapsed time: 1531.342s, Critical Path: 208.27s
	INFO: 1377 processes: 1377 linux-sandbox.
	INFO: Build completed successfully, 1811 total actions
	
```bash
	echo "CREATE DATABASE hub" | mysql -uroot -pmyrootpassword
	
```bash
	mysql -h127.0.0.1 -uroot -pmyrootpassword hub < schema/schema.sql
	
```bash
	mysql -h127.0.0.1 -uroot -pmyrootpassword hub < schema/triggers.mariadb.sql
	
```bash
nano start.sh

```shell
#!/bin/bash
	
./bazel-bin/hub/hub \
	--salt CHANGETHISTOSOMETHINGMORESECURE \
	--db hub \
	--dbUser root \
	--dbPassword myrootpassword \
	--apiAddress 127.0.0.1:14265 \
	--minWeightMagnitude 14 \
	--listenAddress 127.0.0.1:50051

```shell
#!/bin/bash
	
./bazel-bin/hub/hub \
	--salt CHANGETHISTOSOMETHINGMORESECURE \
	--db hub \
	--dbUser root \
	--dbPassword myrootpassword \
	--apiAddress 127.0.0.1:14265 \
	--minWeightMagnitude 14 \
	--listenAddress 127.0.0.1:50051
	--serverType http

```shell
#!/bin/bash
	
./bazel-bin/hub/hub \
	--salt CHANGETHISTOSOMETHINGMORESECURE \
	--db hub \
	--dbUser root \
	--dbPassword myrootpassword \
	--apiAddress nodes.devnet.iota.org:443 \
	--listenAddress 127.0.0.1:50051 \
	--useHttpsIRI true

```bash
chmod a+x start.sh

```bash
./start.sh

```bash
sudo apt install -y supervisor

```bash
sudo nano /etc/supervisor/conf.d/hub.conf

```shell
[program:hub]
command=/home/dave/hub/start.sh
directory=/home/dave/hub/
user=dave
autostart=true
autorestart=true
stderr_logfile=/home/dave/hub/err.log
stdout_logfile=/home/dave/hub/info.log

```bash
sudo supervisorctl reload

```bash
sudo supervisorctl status

```shell
hub                              RUNNING   pid 9983, uptime 0:01:22


 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/install-the-signing-server.md
```bash
	sudo apt update
	sudo apt upgrade
	
```bash
	sudo apt install -y gcc-7
	
```bash
	sudo apt install -y pkg-config zip g++ zlib1g-dev unzip python
	
```bash
	wget https://github.com/bazelbuild/bazel/releases/download/0.29.1/bazel-0.29.1-installer-linux-x86_64.sh
	
```bash
	chmod +x bazel-0.29.1-installer-linux-x86_64.sh
	
```bash
	./bazel-0.29.1-installer-linux-x86_64.sh --user
	
```BASH
	PATH="$PATH:$HOME/bin"
	
```bash
	sudo apt install -y python-pyparsing
	
```bash
	sudo apt install -y git
	
```bash
	git clone https://github.com/iotaledger/hub.git
	
```bash
	cd hub
	
```bash
	bazel build -c opt //signing_server
	
```shell
Target //signing_server:signing_server up-to-date:
	bazel-bin/signing_server/signing_server
INFO: Elapsed time: 1250.848s, Critical Path: 19.29s
INFO: 1283 processes: 1283 linux-sandbox.
INFO: Build completed successfully, 1412 total actions

```bash
	nano docs/ssl/grpc/01_generate_ca.sh
	
```bash
	nano docs/ssl/grpc/02_generate_server.sh
	
```bash
	nano docs/ssl/grpc/03_generate_client.sh
	
```bash
	./docs/ssl/grpc/01_generate_ca.sh
	./docs/ssl/grpc/02_generate_server.sh
	./docs/ssl/grpc/03_generate_client.sh
	
```bash
	nano start.sh
	
```bash
	#!/bin/bash

	./bazel-bin/signing_server/signing_server \
	--salt CHANGETHISTOSOMETHINGMORESECURE \
	--authMode ssl \
	--sslKey /home/jake/hub/docs/ssl/grpc/server.key \
	--sslCert /home/jake/hub/docs/ssl/grpc/server.crt \
	--sslCA /home/jake/hub/docs/ssl/grpc/ca.crt \
	
```bash
	chmod a+x start.sh
	
```bash
	./start.sh
	
```bash
	sudo apt install -y supervisor
	
```bash
	sudo nano /etc/supervisor/conf.d/signing.conf
	
```shell
	[program:hub]
	command=/home/dave/hub/start.sh
	directory=/home/dave/hub/
	user=dave
	autostart=true
	autorestart=true
	stderr_logfile=/home/dave/hub/err.log
	stdout_logfile=/home/dave/hub/info.log
	
```bash
	sudo supervisorctl reload
	
```bash
	sudo supervisorctl status
	
```shell
signing                          RUNNING   pid 11740, uptime 0:00:02

```bash
	scp client.crt client.key ca.crt 192.168.2.212:/home/dave/hub/
	
```shell
	client.crt                                                                    100% 1887     1.6MB/s   00:00    
	client.key                                                                    100% 3243     3.0MB/s   00:00    
	ca.crt                                                                        100% 2029     1.9MB/s   00:00  
	
```bash
	sudo nano /etc/hosts
	
```shell
	192.168.2.210   signer
	
```bash
	nano start.sh
	
```shell
	#!/bin/bash

	./bazel-bin/hub/hub \
	# Keep any existing command-line options
	--signingMode remote \
	--signingProviderAddress signer:50051 \
	--signingServerChainCert client.crt \
	--signingServerKeyCert client.key \
	--signingServerSslCert ca.crt 
	
```bash
	sudo supervisorctl restart hub
	

 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/create-a-demo-exchange.md
```bash
    sudo apt-get install -y python3-all
    
```bash
    echo "alias python=python3" >> ~/.bashrc
    
```bash
	sudo apt-get install python-dev
	
```bash
	cd ~
	git clone https://github.com/fijter/fakexchange.git \
	cd fakexchange
	
```bash
	sudo apt-add-repository multiverse && sudo apt update
	sudo apt install -y python3-venv
	python3 -m venv env
	
```bash
	. env/bin/activate
	
```bash
	pip install -r requirements.txt
	
```bash
	python manage.py migrate
	
``` 
	python manage.py loaddata coins
	
```
	python manage.py runserver
	
```

Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
October 15, 2019 - 14:08:42
Django version 2.2.4, using settings 'exchange.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

```bash
    python manage.py createsuperuser
    
```bash
    python manage.py runserver
    
```bash
    cd exchange
    sudo nano iota.py
    
```py
	import requests
	import datetime

	class IOTA(object):

		def __init__(self):
			self.api_address = 'http://127.0.0.1:8888'

		def request(self, payload):
			headers = {'Content-Type': 'application/json', 'X-IOTA-API-Version': '1'}
			response = requests.post(self.api_address, json=payload, headers=headers)
			
			print(payload)

			if not response.ok:
				raise ValueError('Invalid response', '%s: %s' % (response.status_code, response))

			return response.json()
	
```py
    def create_user(self, user_id):
        ret = self.request({'command': 'CreateUser', 'userId': 'user-%s' % user_id})
        if 'error' in ret:
            return False
        else:
            return True
    
```py
    def get_deposit_address(self, user_id):
        self.create_user(user_id)
        ret = self.request({'command': 'GetDepositAddress', 'userId': 'user-%s' % user_id})
        if 'address' in ret:
            return ret['address']

        return False
	
```py
    python manage.py shell
    
```bash
    >>> from exchange.iota import IOTA
    >>> api = IOTA()
    >>> api.get_deposit_address('000')
    
```bash
    {'command': 'CreateUser', 'userId': 'user-000'}
    {'command': 'GetDepositAddress', 'userId': 'user-000'}
    'GACPCTSIYHK9XXNZUEHGAQEZUCDKJTSH9SMYYIIPYQZSERWZQDNIIUASYTCG9OQJENWSKIWLOELNOYWRC'
    >>>
    
```bash
    nano users/models.py
    
```py
    '''
    Returns a new deposit address for our given symbol
    '''

    if symbol in ('IOTA', 'MIOTA'):
        from exchange.iota import IOTA
        api = IOTA()
        addr = api.get_deposit_address(self.id)
        if not addr:
            return 'Unable to generate'
        else:
            return addr
    
    if symbol == 'BTC':
        return '1CFBdvaiZgZPTZERqnezAtDQJuGHKoHSzg'
    
```bash
    cd exchange
    nano models.py
    
```py
    last_hub_check = models.DateTimeField(null=True, blank=True)
    
```py
    def get_balance_changes(self, since=None):
        if since:
            since = since.strftime('%s000')
        else:
            since = 0

        ret = self.request({'command': 'BalanceSubscription', 'newerThan': since})
        return ret
    
```py
    def active_users(self, since=None):
        balance_changes = self.get_balance_changes(since=since)
        active_users = set()
        for event in balance_changes.values():
            u = event.get('userId')
            if u:
                active_users.add(u)
        return active_users

    def get_active_balances(self, since=None):
        users = self.active_users(since=since)
        ubalance = {}
        for user in users:
            ubalance[user] = self.check_balance(user.split('-', 1)[1])

        return ubalance
    
```bash
    cd exchange/management
    mkdir commands
    cd commands
    
```py
    from django.core.management.base import BaseCommand, CommandError
    from django.utils import timezone
    from exchange.iota import IOTA
    from exchange.models import Coin, WithdrawalsRequest
    from user.models import User

    class Command(BaseCommand):

        help = "Check if there's anything in Hub that needs to be processed"

        def handle(self, *args, **options):

            api = IOTA()
            coin = Coin.objects.by_symbol('MIOTA')
            since = coin.last_hub_check

            print(since)

            data = api.get_active_balances(since)

            if data:
                print(data)
                for user_id, balance in data.items():
                    user = User.objects.get(id=user_id.split('-')[1])
                    user.alter_balance('MIOTA', int(balance), modification_type='DEPOSIT')
                    print("Gave %d iota to user %s after deposit" % (int(balance), user_id))
            coin.last_hub_check = timezone.now()
            coin.save()
    
```bash
    python manage.py makemigrations
    python manage.py migrate
    
```bash
    python manage.py check_changes
    
```bash
2019-10-18 09:34:35.587317+00:00
{'command': 'BalanceSubscription', 'newerThan': '1571391275000'}
{'command': 'CreateUser', 'userId': 'user-1'}
{'command': 'GetBalance', 'userId': 'user-1'}
{'user-1': '500'}
Gave 500 iota to user user-1 after deposit

```py
    def batch_to_exchange(self, batch):
        self.create_user('hot-wallet')
        newbatch = []
        to_exchange = 0

        for user_id, amount in batch.items():
            newbatch.append({'userId': user_id, 'amount': 0-int(amount)})
            to_exchange += int(amount)

        newbatch.append({'userId': 'user-hot-wallet', 'amount': to_exchange})

        ret = self.request({'command': 'ProcessTransferBatch', 'transfers': newbatch})
        
        if not 'error' in ret:
            return True
        else:
            print(ret['error'])
            return False
    
```bash
    sudo nano exchange/management/commands/check_changes.py
    
```py
    if data and api.batch_to_exchange(data):
    
```py
    def withdraw(self, user_id, amount, address, validate_checksum=True, tag='FAKEXCHANGE'):
        self.create_user(user_id)
        ret = self.request({
            'command': 'UserWithdraw', 
            'userId': 'user-%s' % user_id, 
            'amount': amount,
            'payoutAddress': address,
            'validateChecksum': validate_checksum,
            'tag': tag
        })
        
        if 'uuid' in ret:
            return ret['uuid']
        else:
            return False
    
```bash
    sudo nano exchange/management/commands/check_changes.py
    
```py
    for wr in WithdrawalRequest.objects.filter(processed=False, coin=coin):
            status = api.withdraw('hot-wallet', int(wr.amount), wr.address, validate_checksum=True, tag='FAKEXCHANGE')

            if not status:
                print("Failed to withdraw")
                wr.failed = True
                wr.save()
            else:
                wr.processed = True
                wr.processed_at = timezone.now()
                wr.comment = status
                wr.save()
    

 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/integrate-hub.md

 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/get-started-with-rest-api.md
```python
import urllib2
import json

command = {
  "command": "CreateUser",
  "userId": "Jake"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

command = {
  "command": "CreateUser",
  "userId": "Jake"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "CreateUser",
  "userId": "Jake"
}'

```python
import urllib2
import json

command = {
  "command": "GetDepositAddress",
  "userId": "Jake",
  "includeChecksum": "true"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

command = {
  "command": "GetDepositAddress",
  "userId": "Jake",
  "includeChecksum": "true"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "GetDepositAddress",
  "userId": "Jake",
  "includeChecksum": "true"
}'

```
"address": "RDZVDZKRBX9T9L9XXONXDVJDRKYPAABWMQLORGCDCWHDDTSOPRZPCQB9AIZZWZAQ9NBZNVUUUSPQHRGWDYZUVP9WSC"

```python
import urllib2
import json

command = {
  "command": "GetBalance",
  "userId": "Jake"
}

stringified = json.dumps(command)

headers = {
    'content-type': 'application/json',
    'X-IOTA-API-Version': '1'
}

request = urllib2.Request(url="http://localhost:50051", data=stringified, headers=headers)
returnData = urllib2.urlopen(request).read()

jsonData = json.loads(returnData)

print jsonData

```js
var request = require('request');

command = {
  "command": "GetBalance",
  "userId": "Jake"
}

var options = {
  url: 'http://localhost:50051',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
		'X-IOTA-API-Version': '1',
    'Content-Length': Buffer.byteLength(JSON.stringify(command))
  },
  json: command
};

request(options, function (error, response, data) {
  if (!error && response.statusCode == 200) {
    console.log(data);
  }
});

```bash
curl http://localhost:50051 \
-X POST \
-H 'Content-Type: application/json' \
-H 'X-IOTA-API-Version: 1' \
-d '{
  "command": "GetBalance",
  "userId": "Jake"
}'

```shell
10 i available for 'Jake'
History:
events {
	timestamp: 1540856214000
	type: DEPOSIT
	amount: 10
}


 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/quickstart.md

 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/query-the-database.md
```sql
    mysql -u root -p
    
```sql
    USE hub
    
```sql
    SHOW TABLES;
    
```sql
    SELECT * from user_address;
    
```sql
    | id | address | user_id | seed_uuid | created_at | balance |
    +----+---------+---------+-----------+-------------+--------+
    |  1 | RPMENBAM9QOGSCMPIMHLFB9SCCUEUIYM9ODNXYZBUGB9PVZJTSNEZRLJXIPAAJDQTZMJSTDLFUHR9JFSD | 1 | Fnb3MRpr8gacuh1n1CMQQja5Dr53rCqrs4i9kiw0wYysft2d7vzjaPHJRAHjIkPd | 2019-03-28 13:38:48 |       0 |
    |  2 | DAUBDIQEAOMNWYL9OLBQUABXIHVEDWEBFPPZCSVUS9HIKWFUSGHLAULFNFWPFQUHCIFKPRRZVFAGBBFJZ |       2 | TqHIfR0GCIKJPCZ8Q2z6UUQcJi4McGuUjJpkNloDR28cIL7hrMZDtQNAtTqyT2bJ | 2019-04-01 13:39:55 |       0 |
    |  3 | S9OEPEMNSYOZKHPUDWCSH9KJDLDLWHTCNIHBDRTCQHFERTEABJVMRHUX9MIBGCYJINTSAWHVDFFXIIAFA |       2 | N5WrisKpidnvrYSr0aSxtncRr0SH8kUHJfYPEKNZU7DjO2XjL24cxRg6RBTMLpY | 2019-04-01 13:49:43 |       0 |
    +----+--------+---------+-----------------+----------+-------+
    
```sql
    QUIT
    

 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/secure-hub-api.md
```bash
	nano docs/ssl/rest/generate.sh
	
```bash
    ./docs/ssl/rest/generate.sh
    
```bash
    openssl rsa -in key.pem -out key.pem
    
```bash
    --authMode ssl
    --sslCert /home/jake/hub/cert.pem
    --sslKey /home/jake/hub/key.pem
    --sslDH /home/jake/hub/dh.pem
    
```bash
    curl -k https://localhost:50051 \
    -X POST \
    -H 'Content-Type: application/json' \
    -H 'X-IOTA-API-Version: 1' \
    -d '{
    "command": "CreateUser",
    "userId": "Test"
    }'
    
```bash
	nano docs/ssl/grpc/01_generate_ca.sh
	
```bash
	./docs/ssl/grpc/01_generate_ca.sh
	./docs/ssl/grpc/02_generate_server.sh
	./docs/ssl/grpc/03_generate_client.sh
	
```bash
    --authMode ssl \
	--sslKey /home/jake/hub/docs/ssl/grpc/server.key \
	--sslCert /home/jake/hub/docs/ssl/grpc/server.crt \
	--sslCA /home/jake/hub/docs/ssl/grpc/ca.crt
    

 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/recover-tokens.md
```js
    async function createUnsignedBundle({ outputAddress, inputAddress, securityLevel, value }) {
   let bundle = new Int8Array();
   const issuanceTimestamp = Converter.valueToTrits(Math.floor(Date.now() / 1000));

   bundle = Bundle.addEntry(bundle, {
      address: outputAddress,
      value: Converter.valueToTrits(value),
      issuanceTimestamp
   });

    // For every security level, create a new zero-value transaction to which you can later add the rest of the signature fragments
   for (let i = 0; i < securityLevel; i++) {
       bundle = Bundle.addEntry(bundle, {
          address: inputAddress,
          value: Converter.valueToTrits(i == 0 ? -value : 0),
          issuanceTimestamp
       });
   }

   const result = await Bundle.finalizeBundle(bundle);
   
   // Save the bundle array to a binary file
   fs.writeFileSync('bundle', result, (error) => {
      if(!error) {
         console.log('Bundle details saved to file');
      } else{
         console.log(`Error writing file: ${error}`);
      }});

   const bundleHash = Converter.tritsToTrytes(Transaction.bundle(result));

   console.log(bundleHash);
    }
    
```js
    let outputAddress = Converter.trytesToTrits('ADDRESS...');
    let inputAddress = Converter.trytesToTrits('ADDRESS...');

    const params = {
   outputAddress: outputAddress,
   inputAddress: inputAddress,
   securityLevel: 2,
   value: 1
   }
    
```js
    createUnsignedBundle(parameters);
    
```
   Hub@localhost:50051> client.signBundle({address:'ADDRESS...',bundleHash:'BUNDLEHASH...',authentication:'',validateChecksum:false},pr)
   
```js
    const signature = Converter.trytesToTrits('SIGNATURE...')
    
```js
   bundle = new Int8Array(fs.readFileSync('bundle'));
   
```js
   bundle.set(Bundle.addSignatureOrMessage(bundle, signature, 1));
   
```js
   const trytes = []
   for (let offset = 0; offset < bundle.length; offset += Transaction.TRANSACTION_LENGTH) {
      trytes.push(Converter.tritsToTrytes(bundle.subarray(offset, offset + Transaction.TRANSACTION_LENGTH)));
   }
   
```js
   const iota = Iota.composeAPI({
      provider: ''
   });
   
```js
   const depth = 3;
   const minWeightMagnitude = 14;
   
```js
   iota.sendTrytes(trytes.reverse(), depth, minWeightMagnitude)
   .then(bundle => {
      console.log(`Sent bundle: ${JSON.stringify(bundle, null, 1)}`)
   })
   .catch(error => {
      console.log(error);
   });
   
```js
const Iota = require('@iota/core');
const Bundle = require('@iota/bundle');
const Transaction = require('@iota/transaction');
const Converter = require('@iota/converter');
const fs = require('fs');

async function createUnsignedBundle({ outputAddress, inputAddress, securityLevel, value }) {
   let bundle = new Int8Array();
   const issuanceTimestamp = Converter.valueToTrits(Math.floor(Date.now() / 1000));

   bundle = Bundle.addEntry(bundle, {
      address: outputAddress,
      value: Converter.valueToTrits(value),
      issuanceTimestamp
   });

    // For every security level, we need a new zero-value transaction in which to add the rest of the signature fragments
   for (let i = 0; i < securityLevel; i++) {
       bundle = Bundle.addEntry(bundle, {
          address: inputAddress,
          value: Converter.valueToTrits(i == 0 ? -value : 0),
          issuanceTimestamp
       });
   }

   const result = await Bundle.finalizeBundle(bundle);
   
   fs.writeFileSync('bundle', result, (error) => {
      if(!error) {
         console.log('Bundle details saved to file');
      } else{
         console.log(`Error writing file: ${error}`);
      }});

   // Get the bundle hash trytes
   const bundleHash = Converter.tritsToTrytes(Transaction.bundle(result));

   // Use the bundle hash in Hub to get the signature
   console.log(bundleHash);
}

// Get the values for these parameters from Hub

let outputAddress = Converter.trytesToTrits('LYRGKMBCVZMTPRRMPDNNRXFVKIXTZCJTZDOAMTHZXQNESSLYGVQ99PGAW9OCAPRGSSSDMFCMZ9NAJTWUX');
let inputAddress = Converter.trytesToTrits('LIQJBJRBSTGYWHYRPCLLCZUMP9SLHCBBWGQ9YRFWYDFF9FMXIAELYLTTBXCPVIDWWZYIOJIFLUFYVZIBD');

const params = {
   // Address in trits to send the tokens from the spent address (without checksum)
   outputAddress: outputAddress,
   // Swept address in trits (without checksum)
   inputAddress: inputAddress,
   // Security level of the spent address
   securityLevel: 2,
   // Total amount of IOTA tokens to withdraw from the spent address
   value: 1 
}

createUnsignedBundle(params);

// Replace with the signature from Hub in trits
const signature = Converter.trytesToTrits("DRFFHLSWJBLEBNHXMSLIGUKBQJIJRNHGMGVDFKKPF9DYABMQXDVLWPHXT9LEPSXVBIYKZEWCT9U99NJ9DQJVJJMBGCUHTZQBCYWEIN9DCSDPJXRKGQQBEHPBZZWRFNBIENYV9UNSSNXZHGATAWRTHEW9FQVTXUJLFCQEPLVWATFRXFAUSNFKVVYFISDULSVIQNEQVPNIKZSBJQHWAZMGOIPZSKY9QDVMCFXUS9UGUDK9BOZFAWXQFHFBEYUJBESIFMBWNXVFCKHTGXTWKLSMZ9FHYFUZKE9GTLFWXPCLFPQKCJQAZFSTGWJILTACIXLRRJWDGIGJOCTUCEBFLWFQBQKAHTJMAEWZSDMOTQ9GPALHYYRGTFYJCDRFKZFUPECKUEVZJPVQDYIDJAIHSFSWZSQLQIJSCKJPJPLFVHXLUMLZKUHJWRVPBIOESDIFCUCKZAGANIATOUCSF9IOUA9EQWCSOFMETZEADESOADJGLCDKUQIBEPMXBWNIHJMJHCYUSM9LXMEBTHORZDGYST9VJLUUSXTSAURNUZAUPNWIUSRVL9KGFCEIAIWTNIH9BIRCSLWDAPXYKSZAOFERYFGPBWYUIEEENGMMYVPRRRIXULRJWJCLUBBNMNLFMNPYDHVBFZUFRCD9PCZAQLDBJFFKGQJW9LFUUPIZPKUCBAJFUEUTMXKWUKFXKQISDXYIHEJSQTCEHVABAUWGGANWZCNBOLGZDCLXSZIUKRMFG9THEZTULVZ9CFGNUWCTQVSACVYSZASONJIGUSXZAZNVCBIWRHLOKCXPXFONAWNMWRMGAXXJNPYRNDKAKIEWNSDRSNTSTMDPUYNPSIJTWERECFKSNTWOKCMDIUEKEYXORVIQVQXKWOWNMVBLWVJIWBWKAHHECGLNZAADFVSATZDMLYXBGRCEATLTCMQACYQQDQOXXMSUWSZVZKEXQUYM9DZMMOMBIVCPJU9UUKAXOSQQX9QRPTFXSZPBZFFJLGOBVZZOT9LNWMA9LTRUZUJBDGH9GILESQLNYDYPCHHYICVMAPDVDILEOZDNZMVSERSDWLZ9ZXFKJXISY9BLXZZ9DJYIRPXNLGAWMDZOXOWBUDZRUROHKPREZJTXNSUNC9LDHGFLGYOXBAQVGYUZXECCKUUFOPSLPH9QRLAZUOWGBQBVEJBAZKUEWSUIVGLEULZKDXFQSGQNZYXXZCYPRZUSBPMVPLWMYDWEGXANNXLOTME9HQGQW9POKCSQWHLHUUUWNFFHXZYDYUYBMSJVWSAKMEFJDJNJZHIYP9NBLFWVKBSDIUXLAVLMYLLCRX9BZZZQEESERVDIHKKPVAM9UEOXR9CFW9OAXLCLMJHWEOSTCYYHPWHJZEKAXPBGNGVMCGNHOUWMJX9GEV9BBGYVNEG9AXSNPFEGOZNZWXMNXVV9CVJ9Z9DGLYOUWZKFJYIIWRUEYPGDFSJGRXZDS9RKFELFVMASCAPXVCPLNQRJHADACOOGGHOVTTG9DCOCMHTMTMNEVASXHKLBAWKNFTFDAEEHATXGUKBRLDXNLSHZEPO9OZQBSHJRLGLNPKHAX9WRMYARVJETYAPO9SUWZQHAKJAUWBIWQDSQ9FWIEWSJWKQGNIFGGVKZLWZZOVVBGPNRTONMZDLJHGWQUSCILYOBG9YUUUZDXILKBIQ9ZEKXEHURJLFMDB9CUZI9TEJSQZYHMNTX9F9GJBZ9UJNCKZVYAROOVZYZURRWKLYHJEMZDQLH9FWODFZUEZRV9DWNZCOMXNXFWCPCZQDGFP9DKJYUNXIYIRUVWRSWWIGKZWITSYIVEOPHBJGSZNYJSFTXAKLENHCPGOYQSGEZQMRVNFGAGZXFG9GYFIBJRVU9MYDSZSTJQVVODQJJEHYJYCHOHTCOPZJVGMBEIIGYFMNAPZATAHQGFVWSGYODTOHRE9FVYXSLESASDMMAPBZZVPLIWGIRORAGWNFA9JPSUWJCTNBYRDJANSYMNDGQJNSFQRSVMRIAXDWQONWSAYUYFXJUTWYLPXVV9YGJBMQUXODSEFAEGYXSYYEQTVRAWNCKKSWPRYYINMBOBNZJSANFLKDFMGTNUDU9SFQRBUJM9XDNWIECTJPEICLVXTMCMGQJT9BTRZ9HQCHHBYXSPJBGTSTJDIOUQ9SLRVHTENSCLLGBFMXOYFKYB9SAKWTPGHEXPU9ERFYGEMEPSLJUPRJNRRWQLA9XVSWBEGJHLLDXGDTESDPRBRQHLCIOPWBDYJVCLOHHDYFNQSXBOVUVICSVBMEZYJJZHGDKAHFRJHBDWUSFSGC9UCLVH9ZNVMPYMRMMJTSWAFDRGNALYLRRVPLGMMKGZR9LXEV9ZXRPFKYDBLIUEVEJKVDANOBKFLRSWQPMOMTEJA9WVHFGBNTAJIPWNUWKJMQAOKBCACLYGRCBZRVFKIOMCXYXGUTNODHMLOZRETEPDONTAPVQEQAWCAH9CSTPYRFUXPKBDVONWFNOZHA9N9YUTEIGAHAPEKNWGCXNAMVJVLPCAPDPNTVVSKROYWXDKVLOAHPCCJBGBPSMQEDFDXSGNMIMLEZPBVCKYKVZFFIZVECYQKQWDHXRVEAOL9QIDZK9JFBRYL9JOSAWMBZAXJWNBTLKRSIYHZEILOPRZVLOFACJGIPABPFZILVQMUAYMPABXEBDYOSYBZKUXCFVXUEQJJOUDMBZZGOBVBF9N9ENHSCTDVFASKXHOLLFYMMWSDFHJKHODXYPWMEOQZKIECIBHYXF9PXZOCBMIBI9PLVDVBGALAWBT9FLIZWRNENVLSUCSOATNVRUKTTWZNTZRCMTLALKYGOUKVSO9BBUDVUCFCIKQZWJIUBMXTSNQSFRETWAHPQ9MTYOUKX9BLA9QUUHPNLNINNIPWQVUPUCXHTMURNWYSUGOKWPYMZ9ILDJWEOD9D99YWKQTKKOOWQOLEZMTZ99AYQPWUVVZUNVORK9XRAE9GQSHLVIZLCEDWHSWYNVZKELOI9AVGUWFSJYHA9WZNVNZYFEZYJAXKUOPINHR9OEN9NVLNIDEJLPLVEMIANSGFXXXL9IKQAFLFPOPWO9SAEMNETZMUM9NEHAA9JOGLHOBHYHXASFWHGNKCRNWZSCDPIFGFHOFLWCOMNCPRBECDEVSNXGKNF9IOYIVZRBJJHCREKOFHMTXXALIWOGOZRIJITCWGKQKCVUPUOFNMEUGSVPYAKRORXQHUXJVCAEWJBLAPDDSCIYMODOMM9GWQSVQUBGBUUDVGSSHAONRHVMILHPMBHKKHUTRZFWNAEEUHCQUGHLSVXAMOGVTXELPGKXBHELPCGYRCLMYGIZYLANN9LSXCQVQPBLIZXJUVRTA9CQAFSWWTIBILERJDTYHJWDPOYHNCHJEWSVXEJCPZVNVLWWOAZHJLLTS9WAEXXSMWHITJYJLFHGGDFNYIGDKJFUZGSJDCXSVNZQYUSAPVJRHSRNLNQDLDBEFPLRXJ9MIZBPNBZVHHLOYC9VYLDKNJAHLNPRCSOZKHWHQKXYWXABCPHYNQYRZJEARZCOLQMBCJCHNNSFGORUOHFOFJMF9MJHHFFVBCS9QITDPGXTJKDDJKHGBOLEVMXRAWUMCXUABILEYVHRTZFFMAM9REMUPNEPUHKWFHOJEFBLXXYHI99UDFMXLXEFWQLPTKJJQEQAXYCQNCZMMOTSKGQCJNFCWGUISHWZLDWJBNNAFDDOMOJ9QRVDEXXNHLKVP9CQJSGZRT9CHDTUJIXWM9WB9RTYQ9EEIJWEVSGKQPFLKG9HKNWSGWZUAGOBENKKT9NUMUIAPWZ9UESGRDITJSOMJAPHIN9CJSSUJCAKCLTQPJOUEMKVLSZZ9MAEROPNSBHPHOFBVVOSNTWPSCRTAYQJQSG9YXPRMAHREBCQKMRFISYDXXNRMGEHCXFNH9SAGFOYAHFCQRNQFRXDIJAIBIRPBNVQZLZNJHBVCZHOIHJURHCFFVHFCPBSKGLQOCXKWXSFINGLYQAH9YGPFWJGQDOUIMFJJOFGNDREMEIMDKOEQONGHTVYWVXWHQQOJGCM9YEHBCVWNJLJXK9HQB9BDYTUJVTHYU9R9DPMUHTLB9NGFEEVKIUANTFHUQRRK9LSSFMUBZLKJTJLPQLBEUSVAFJURBSGFNMBZCDKEUTCNYHBZPUCZGQDAP9JISCORGZVTMLCFRDHKJBCEOYOHEHUDTHMGHMFDTPKGNQPCIBTSOCISWKFSMPDVUKPAWVACALATUSWJTJPXHJWUFDEICUNUDSHGYEGRPMDRABLMFCHXNUA9LHNUMDKXH99XGJKU9XMUXFOXKWLI9AFNDD9CSETSFB9MLEMEY9UMHQQYROBZZEBGHRQRERMHILEVEGNOBSFUIIIJZHRFPOBXHGRSXPYEC");

bundle = new Int8Array(fs.readFileSync('bundle'));

// Transaction 0 is the output transaction, so start adding the signature fragments, starting from the next transaction in the bundle
bundle.set(Bundle.addSignatureOrMessage(bundle, signature, 1));

const trytes = []
for (let offset = 0; offset < bundle.length; offset += Transaction.TRANSACTION_LENGTH) {
    trytes.push(Converter.tritsToTrytes(bundle.subarray(offset, offset + Transaction.TRANSACTION_LENGTH)));
}

const iota = Iota.composeAPI({
   // Replace with the URL of the IRI node you want to send the transactions to
    provider: 'https://pow.iota.community:443'
});

const depth = 3;
const minWeightMagnitude = 14;

// We need the bundle to be in order head to tail before sending it to the node
iota.sendTrytes(trytes.reverse(), depth, minWeightMagnitude)
   .then(bundle => {
      console.log(`Sent bundle: ${JSON.stringify(bundle, null, 1)}`)
   })
   .catch(error => {
      console.log(error);
   });


 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/get-started-with-the-grpc-api.md
```bash
    sudo apt install -y npm
    
```bash
    sudo npm install -g grpcc
    
```bash
    cd hub
    
```bash
    grpcc -i -a localhost:50051 -p proto/hub.proto
    
```bash
    Connecting to hub.rpc.Hub on localhost:50051. Available globals:

    client - the client connection to Hub
        createUser (CreateUserRequest, callback) returns CreateUserReply
        getBalance (GetBalanceRequest, callback) returns GetBalanceReply
        getDepositAddress (GetDepositAddressRequest, callback) returns GetDepositAddressReply
        userWithdraw (UserWithdrawRequest, callback) returns UserWithdrawReply
        userWithdrawCancel (UserWithdrawCancelRequest, callback) returns UserWithdrawCancelReply
        getUserHistory (GetUserHistoryRequest, callback) returns GetUserHistoryReply
        processTransferBatch (ProcessTransferBatchRequest, callback) returns ProcessTransferBatchReply
        balanceSubscription (BalanceSubscriptionRequest, callback) returns BalanceEvent
        getStats (GetStatsRequest, callback) returns GetStatsReply
        sweepSubscription (SweepSubscriptionRequest, callback) returns SweepEvent
        getAddressInfo (GetAddressInfoRequest, callback) returns GetAddressInfoReply
        sweepInfo (SweepInfoRequest, callback) returns SweepEvent
        signBundle (SignBundleRequest, callback) returns SignBundleReply
        sweepDetail (SweepDetailRequest, callback) returns SweepDetailReply

    printReply - function to easily print a unary call reply (alias: pr)
    streamReply - function to easily print stream call replies (alias: sr)
    createMetadata - convert JS objects into grpc metadata instances (alias: cm)
    printMetadata - function to easily print a unary call's metadata (alias: pm)

    Hub@localhost:50051> (node:6023) DeprecationWarning: grpc.load: Use the @grpc/proto-loader module with grpc.loadPackageDefinition instead
    
```bash
    client.createUser({userId: "Jake"}, pr)
    
```bash
    client.getDepositAddress({userId: "Jake", includeChecksum: true}, pr)
    
```bash
	client.getBalance({userId: "Jake"}, pr)
	
```shell
10 i available for 'Jake'
History:
events {
	timestamp: 1540856214000
	type: DEPOSIT
	amount: 10
}


 /home/iotahub/documentation/wallets/0.1/hub/how-to-guides/configure-hub.md

 /home/iotahub/documentation/wallets/0.1/hub/introduction/overview.md

 /home/iotahub/documentation/wallets/0.1/introduction/overview.md

 /home/iotahub/documentation/iot/home.md

 /home/iotahub/documentation/iot/0.1/doc-index.md

 /home/iotahub/documentation/iot/0.1/concepts/flashing.md

 /home/iotahub/documentation/iot/0.1/concepts/ipv6-mesh-network.md

 /home/iotahub/documentation/iot/0.1/references/troubleshooting.md
```bash
mount: /sys/kernel/debug: none already mounted or mount point busy.

```bash
  git clone https://github.com/mbedmicro/pyOCD.git
  
```bash
  cd pyOCD/udev
  
```bash
  sudo apt remove binutils-arm-none-eabi gcc-arm-none-eabi libnewlib-arm-none-eabi
  
```bash
  tar -xjvf $FILENAME
  
```bash
  echo "export PATH=$PATH:/home/$PATHTOFILE/bin/" >> ~/.bashrc
  
```bash
recipe for target 'flash' failed
make: *** [flash] Error 1


 /home/iotahub/documentation/iot/0.1/how-to-guides/set-up-nrf52-microcontroller.md
```bash
    sudo apt-get install -y python3-all
    sudo apt-get install -y python-pip3
    
```bash
    echo "alias python=python3" >> ~/.bashrc
    
```bash
    git clone https://github.com/iota-community/BLE-environment-sensor.git
    cd BLE-environment-sensor/examples/hello-world
    
```bash
    sudo chmod 777 $USB_PORT
    
```bash
    BOARD=BOARD PORT=/dev/ttyUSB0 make flash term
    
```
    2019-08-27 09:17:09,359 - INFO # main(): This is RIOT! (Version: 2019.10-devel-488-g1b1c9)
    2019-08-27 09:17:09,359 - INFO # Hello World!
    2019-08-27 09:17:09,361 - INFO # You are running RIOT on a(n) nrf52832-mdk board.
    

 /home/iotahub/documentation/iot/0.1/how-to-guides/connect-to-serial-interface.md

 /home/iotahub/documentation/iot/0.1/how-to-guides/set-up-ipv6-ble-host-example.md
```bash
    cd BLE-environment-sensor/examples/env_sensor_network/
    
```bash
    BOARD=BOARD PORT=/dev/ttyUSB0 make flash term
    
```bash
*************************************************************
*** Could not import the Google protobuf Python libraries ***
*** Try installing package 'python-protobuf' or similar.  ***
*************************************************************

```bash
sudo apt-get install python-protobuf


 /home/iotahub/documentation/iot/0.1/how-to-guides/run-an-environment-to-tangle-app.md
```bash
    server start
    
```bash
    git clone https://github.com/iota-community/env-sensor-mam-writer.git
    
```bash
    sudo nano env-sensor-mam-writer/app/server-client.c
    
```bash
    cd env-sensor-mam-writer &&  bazel run -c opt //app
    
```bash
    git clone https://github.com/iota-community/env-sensor-mam-reader.git
    
```bash
    sudo nano env-sensor-mam-reader/app/sensor_receiver.c
    
```bash
    cd env-sensor-mam-reader && bazel run -c opt //app
    

 /home/iotahub/documentation/iot/0.1/how-to-guides/set-up-a-ble-ipv6-border-router.md
```bash
    uname -a
    
```bash
    sudo dpkg -i linux-image*.deb
    
```bash
    sudo apt-get install -y bluez
    
```bash
    sudo su
    
```bash
    mount -t debugfs none /sys/kernel/debug
    
```bash
    modprobe bluetooth_6lowpan
    
```bash
    echo 1 > /sys/kernel/debug/bluetooth/6lowpan_enable
    
```bash
    hciconfig
    
```bash
    hci0:   Type: Primary  Bus: UART
        BD Address: B8:27:EB:57:16:51  ACL MTU: 1021:8  SCO MTU: 64:1
        UP RUNNING
        RX bytes:1528 acl:0 sco:0 events:92 errors:0
        TX bytes:2558 acl:0 sco:0 commands:92 errors:0
    
```bash
    hciconfig YOUR_DEVICE_ID reset
    
```bash
    hciconfig hci0 reset
    

 /home/iotahub/documentation/iot/0.1/how-to-guides/connect-a-I2C-sensor.md

 /home/iotahub/documentation/iot/0.1/how-to-guides/set-up-a-bluetooth-star-network.md
```bash
    hcitool lescan
    
```bash
    ifconfig
    
```bash
    echo "connect 00:AA:BB:XX:YY:ZZ 1" >> /sys/kernel/debug/bluetooth/6lowpan_control
    

 /home/iotahub/documentation/iot/0.1/how-to-guides/connect-bosch-bme-280-bmp-280.md

 /home/iotahub/documentation/iot/0.1/how-to-guides/run-an-environment-sensor-and-client.md
```bash
    server start
    
```bash
    git clone https://github.com/iota-community/BLE-environment-sensor-client.git $GOPATH/src/github.com/citrullin/udp_client
    
```c
    var seedSensorConfig = SensorNode{
        Config: SensorConfig{
            Address: net.UDPAddr{
                IP: net.ParseIP("fe80::2ca:46ff:fed3:1967"), Port: 51037, Zone: interfaceName,
            },
        },
    }
    
```bash
    cd $GOPATH/src/github.com/citrullin/udp_client && go run client.go
    

 /home/iotahub/documentation/iot/0.1/how-to-guides/connect-programmer.md

 /home/iotahub/documentation/iot/0.1/how-to-guides/install-go-on-sbc.md
```bash
    uname -i
    
```bash
    sudo mv go /usr/local/
    
```bash
    sudo mkdir -p ~/$USERNAME/go/src
    sudo mkdir ~/$USERNAME/go/bin
    sudo mkdir ~/$USERNAME/go/pkg
    
```bash
    sudo nano /etc/environment
    
```bash
    GOROOT=/usr/local/go
    GOPATH=~/[USERNAME]/go
    
```bash
    ln -s /usr/bin/go /usr/local/go/bin/go
    ln -s /usr/local/go/bin/gofmt /usr/bin/gofmt
    
```bash
    go version
    

 /home/iotahub/documentation/iot/0.1/how-to-guides/setup-sbc.md
```bash
    nmcli dev wifi connect MY_SSID password MY_PASSWORD
    
```bash
    ping iota.org
    
```bash
ssh USERNAME@IP_ADDRESS

```
WiFi interface name: wlp3s0
The SBCs' local IPv6 address: fe80::c0a2:76c6:4ed5:a44

```bash
ssh -6 USERNAME@fe80::c0a2:76c6:4ed5:a442%wlp3s0

```bash
    sudo chmod 777 $USB_PORT
    
```bash
    platformio SBC monitor -b $BAUD_RATE -p $USB_PORT
    
```bash
    nmcli dev wifi connect MY_SSID password MY_PASSWORD
    
```bash
    ping iota.org
    
```bash
    ifconfig
    
```bash
    ssh USERNAME@IP_ADDRESS
    
```bash
    nmap -sn 10.197.0.0/24
    
```bash
    nmap -sn 10.197.0.0/16
    
```bash
    ssh USERNAME@IP_ADDRESS
    

 /home/iotahub/documentation/iot/0.1/how-to-guides/read-sensor-data.md
```bash
    cd BLE-environment-sensor/examples/saul
    
```bash
    BOARD=BOARD PORT=USB_PORT make flash term
    
```bash
    saul
    
```bash
    2019-09-02 16:54:12,881 - INFO #  saul
    2019-09-02 16:54:12,883 - INFO # ID     Class           Name
    2019-09-02 16:54:12,887 - INFO # #0     ACT_SWITCH      Led Red
    2019-09-02 16:54:12,888 - INFO # #1     ACT_SWITCH      Led Green
    2019-09-02 16:54:12,891 - INFO # #2     ACT_SWITCH      Led Blue
    2019-09-02 16:54:12,893 - INFO # #3     SENSE_TEMP      NRF_TEMP
    2019-09-02 16:54:12,894 - INFO # #4     SENSE_TEMP      bme280
    2019-09-02 16:54:12,896 - INFO # #5     SENSE_PRESS     bme280
    2019-09-02 16:54:12,897 - INFO # #6     SENSE_HUM       bme280
    
```bash
    saul read 5
    
```
    2019-09-02 16:54:30,904 - INFO #  saul read 5
    2019-09-02 16:54:30,907 - INFO # Reading from #5 (bme280|SENSE_PRESS)
    2019-09-02 16:54:30,909 - INFO # Data:         1631 hPa
    

 /home/iotahub/documentation/iot/0.1/how-to-guides/install-arm-gcc-toolchain.md
```bash
    sudo apt remove binutils-arm-none-eabi gcc-arm-none-eabi libnewlib-arm-none-eabi
    
```bash
    tar -xjvf NAME_AND_VERSION_OF_TOOLCHAIN.tar.bz2
    
```bash
    sudo mv GCC_ARM_DIRECTORY_NAME/ /opt/
    
```bash
    sudo nano .bashrc
    
```bash
    export PATH=$PATH:~/.local/bin/:/opt/GCC_ARM_DIRECTORY_NAME/bin
    

 /home/iotahub/documentation/iot/0.1/how-to-guides/get-started-with-microcontrollers.md

 /home/iotahub/documentation/iot/0.1/introduction/overview.md

 /home/iotahub/documentation/blueprints/home.md

 /home/iotahub/documentation/blueprints/0.1/doc-index.md

 /home/iotahub/documentation/blueprints/0.1/p2p-energy/overview.md

 /home/iotahub/documentation/blueprints/0.1/p2p-energy/architecture.md

 /home/iotahub/documentation/blueprints/0.1/p2p-energy/deployment-and-testing.md

 /home/iotahub/documentation/blueprints/0.1/doc-immutability/overview.md

 /home/iotahub/documentation/blueprints/0.1/doc-immutability/architecture.md
```json
{
    Url: http://my_document.pdf,
    txHash: AD9FE...YA99F9
}

```json
{
    Hash: ac5e...f1f8
}

```json
    Hash = ac5e...f1f8


 /home/iotahub/documentation/blueprints/0.1/track-and-trace/overview.md

 /home/iotahub/documentation/blueprints/0.1/track-and-trace/architecture.md
```javascript
createItem( eventBody, channel, secretKey, userId);
updateItem( eventBody, mam, newItemData, user);

```javascript
{ 
    "data": [{ 
        "assetUniqueID": "string", 
        "assetOwnerID": "string", 
        "assetUserID": "string", 
        "location": ["latitude", "longitude"], 
            "time": "date",	 
        "status": "string" 
    }] 
} 

```javascript
import Mam from 'mam.client.js'; 
import { isEmpty, uniqBy, pick, find, last } from 'lodash'; import { asciiToTrytes, trytesToAscii } from '@iota/converter' 
import { createItem, updateItem } from './firebase'; 
import config from '../config.json'; 

```javascript
// Initialise MAM State with IOTA provider 
let mamState = Mam.init(config.provider); 

```javascript
// create a new Item (Asset) 
export const createItemChannel = (project, itemId, request, userId) => { 
… 
 
const messageBody = { 
        ...request,         
        ...eventBody,         
        time: null,         
        location: null,         
        assetUniqueID: null,         
        assetOwnerID: null,         
        assetUserID: null 
    };

```javascript
// create a new restricted channel 
const createNewChannel = async (payload, secretKey) => {
// Set channel mode for default state 
  const defaultMamState = Mam.changeMode(mamState, 'restricted', secretKey);   
  updateMamState(defaultMamState); 
  const mamData = await publish(payload); 
  return mamData; 
};

```javascript
// store new messages for each new asset and for each change of custody 
// Publish to tangle 
const publish = async data => { 
  try { 
    // Create MAM Payload - STRING OF TRYTES 
    const trytes = asciiToTrytes(JSON.stringify(data)); 
    const message = Mam.create(mamState, trytes); 
 
    // Save new mamState 
    updateMamState(message.state); 
 
    // Attach the payload. 
    await Mam.attach(message.payload, message.address);  
    return { root: message.root, state: message.state }; 
  } catch (error) { 
    console.log('MAM publish error', error); 
    return null; 
  } 
}; 

```javascript
export const createItem = (eventBody, channel, secretKey, userId) => { 
  // Create item reference 
  const itemsRef = getItemReference(eventBody.itemId);   
  appendItemToNewUser(userId, eventBody.itemId);    
  
  itemsRef.set({     
      ...eventBody,     
      mam: {       
          root: channel.root,       
          seed: channel.state.seed,       
          next: channel.state.channel.next_root,       
          start: channel.state.channel.start,
          secretKey, 
    },
  });
};

```javascript
export const updateItem = (eventBody, mam, newItemData, user) => { 
  // Create reference 
  const itemsRef = getItemReference(eventBody.itemId); 
   
   itemsRef.update({     
       ...eventBody,     
       mam: {       
           root: mam.root,       
           secretKey: mam.secretKey,       
           seed: newItemData.state.seed,       
           next: newItemData.state.channel.next_root,       
           start: newItemData.state.channel.start, 
    }, 
  }); 
};


 /home/iotahub/documentation/blueprints/0.1/track-and-trace/deployment-and-testing.md

 /home/iotahub/documentation/blueprints/0.1/data-marketplace/overview.md

 /home/iotahub/documentation/blueprints/0.1/data-marketplace/architecture.md

 /home/iotahub/documentation/blueprints/0.1/data-marketplace/deployment-and-testing.md

 /home/iotahub/documentation/blueprints/0.1/introduction/overview.md

 /home/iotahub/documentation/blueprints/0.1/tangle-data-storage/overview.md

 /home/iotahub/documentation/blueprints/0.1/tangle-data-storage/architecture.md
```javascript
IPFSStoreRequest {
   /**
    * The name of the file.
    */
   name: string;

   /**
    * The description of the file.
    */
   description: string;

   /**
    * The size of the file.
    */
   size: number;

   /**
    * The modified date of the file.
    */
   modified: Date;

   /**
    * The sha256 hash of the file.
    */
   sha256: string;

   /**
    * The file data encoded in base64.
    */
   data: string;
}

```javascript
import ipfsClient from "ipfs-http-client";

const buffer = Buffer.from(request.data, "base64");
const ipfs = ipfsClient(config.ipfs);
const addResponse = await ipfs.add(buffer);

```javascript
const nextAddress = generateAddress(config.seed, 0, 2);

const tanglePayload = {
   name: request.name,
   description: request.description,
   size: request.size,
   modified: request.modified,
   sha256: request.sha256,
   ipfs: addResponse[0].hash
};

const iota = composeAPI({
        provider: config.provider
    });

const trytes = await iota.prepareTransfers(
   "9".repeat(81),
   [
	   {
		   address: nextAddress,
		   value: 0,
		   message: TrytesHelper.toTrytes(tanglePayload)
	   }
   ]);

const bundle = await iota.sendTrytes(trytes, config.depth, config.mwm);
   

```javascript
const iota = composeAPI({
        provider: config.provider
    });

const transactions = await iota.getTrytes([request.transactionHash]);
const txObject = asTransactionObject(transactions[0]);
const ascii = trytesToAscii(txObject.signatureMessageFragment);
const payload = JSON.parse(ascii)

```javascript
const sha256 = crypto.createHash("sha256");
sha256.update(fileBuffer);
const ipfsSha256 = sha256.digest("hex");
if (ipfsSha256 === payload.sha256) {
   console.log("All Is Well");
} else {
   console.log("Oh no, hash does not match");
}


 /home/iotahub/documentation/blueprints/0.1/tangle-data-storage/deployment-and-testing.md

 /home/iotahub/documentation/getting-started/home.md

 /home/iotahub/documentation/getting-started/0.1/doc-index.md

 /home/iotahub/documentation/getting-started/0.1/network/the-tangle.md

 /home/iotahub/documentation/getting-started/0.1/network/iota-networks.md
```
EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9

```
EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM


 /home/iotahub/documentation/getting-started/0.1/network/the-coordinator.md

 /home/iotahub/documentation/getting-started/0.1/network/nodes.md

 /home/iotahub/documentation/getting-started/0.1/network/minimum-weight-magnitude.md

 /home/iotahub/documentation/getting-started/0.1/references/glossary.md

 /home/iotahub/documentation/getting-started/0.1/references/quickstart-dev-handbook.md
```js
// Require the core package
const Iota = require('@iota/core');

// Create a new instance of the IOTA object
// Use the `provider` field to specify which node to connect to
const iota = Iota.composeAPI({
provider: 'https://nodes.thetangle.org:443'
});

```js
const transfers = [
    {
        value: 0,
        address: address,
        message: message,
        tag: tag,
        obsoleteTag: obsoleteTag 
    }
    ];

```js
iota.prepareTransfers(seed, transfers)
        .then(trytes => {
            return iota.sendTrytes(trytes, 3/*depth*/, 14/*minimum weight magnitude*/)
        })
        .then(bundle => {
        console.log(`Bundle: ${JSON.stringify(bundle, null, 1)}`)
    })
    .catch(err => {
            // Catch any errors
        console.log(err);
    });


 /home/iotahub/documentation/getting-started/0.1/introduction/overview.md

 /home/iotahub/documentation/getting-started/0.1/introduction/ternary.md

 /home/iotahub/documentation/getting-started/0.1/clients/addresses.md
```
OGMMQJUDMNNYSOAXMJWAMNAJPHWMGVAY9UWBXRGTXXVEDIEWSNYRNDQY99NDJQB9QQBPCRRNFAIUPGPLZ

```
Kerl(seed + index)


 /home/iotahub/documentation/getting-started/0.1/clients/token.md

 /home/iotahub/documentation/getting-started/0.1/clients/signatures.md
```
13 - decimal value

```
13 + decimal value


 /home/iotahub/documentation/getting-started/0.1/clients/security-levels.md

 /home/iotahub/documentation/getting-started/0.1/clients/checksums.md

 /home/iotahub/documentation/getting-started/0.1/clients/seeds.md
```
PUEOTSEITFEVEWCWBTSIZM9NKRGJEIMXTULBACGFRQK9IMGICLBKW9TTEVSDQMGWKBXPVCBMMCXWMNPDX


 /home/iotahub/documentation/getting-started/0.1/tutorials/get-test-tokens.md

 /home/iotahub/documentation/getting-started/0.1/tutorials/get-started.md
```bash
cat /dev/urandom |tr -dc A-Z9|head -c${1:-81}

```bash
cat /dev/urandom |LC_ALL=C tr -dc 'A-Z9' | fold -w 81 | head -n 1

```bash
npm install @iota/core

```bash
yarn add @iota/core

```java
allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

```java
dependencies {
    compile 'com.github.iotaledger:iota-java:1.0.0-beta7'
}

```bash
go mod init <your-module-path>

```bash
go get github.com/iotaledger/iota.go/api

```js
// Require the core package
const Iota = require('@iota/core');

// Create a new instance of the IOTA API object
// Use the `provider` field to specify which node to connect to
const iota = Iota.composeAPI({
provider: 'https://nodes.devnet.iota.org:443'
});

// Call the `getNodeInfo()` method for information about the node and the Tangle
iota.getNodeInfo()
// Convert the returned object to JSON to make the output more readable
.then(info => console.log(JSON.stringify(info, null, 1)))
.catch(err => {
    // Catch any errors
    console.log(err);
});

```java
// Create a new instance of the IOTA API object
IotaAPI api = new IotaAPI.Builder().build();
IotaAPI api = new IotaAPI.Builder()
        .protocol("https")
        .host("nodes.devnet.iota.org")
        .port("443")
        .build();
// Call the `getNodeInfo()` method for information about the node and the Tangle
GetNodeInfoResponse response = api.getNodeInfo();
// Print the response to the console
System.out.println(response);

```golang
package main

import (
    . "github.com/iotaledger/iota.go/api"
    "fmt"
)

var endpoint = "https://nodes.devnet.iota.org:443"

func main() {
	// Create a new instance of the IOTA API object
	api, err := ComposeAPI(HTTPClientSettings{URI: endpoint})
	handleErr(err)

    // Call the `getNodeInfo()` method for information about the node and the Tangle
	nodeInfo, err := api.GetNodeInfo()
    handleErr(err)

    // Print the response to the console
	fmt.Println(nodeInfo)
}

func handleErr(err error) {
	if err != nil {
		panic(err)
	}
}

```json
{
    "appName": "IRI Testnet",
    "appVersion": "1.5.6-RELEASE",
    "jreAvailableProcessors": 8,
    "jreFreeMemory": 12052395632,
    "jreVersion": "1.8.0_181",
    "jreMaxMemory": 22906667008,
    "jreTotalMemory": 16952328192,
    "latestMilestone": "FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999",
    "latestMilestoneIndex": 1102841,
    "latestSolidSubtangleMilestone": "FPRSBTMKOP9JTTQSHWRGMPT9PBKYWFCCFLZLNWQDFRCXDDHZEFIEDXRIJYIMVGCXYQRHSZQYCTWXJM999",
    "latestSolidSubtangleMilestoneIndex": 1102841,
    "milestoneStartIndex": 434525,
    "neighbors": 3,
    "packetsQueueSize": 0,
    "time": 1549482118137,
    "tips": 153,
    "transactionsToRequest": 0,
    "features": ["snapshotPruning", "dnsRefresher", "testnet", "zeroMessageQueue", "tipSolidification", "RemotePOW"],
    "coordinatorAddress": "EQQFCZBIHRHWPXKMTOLMYUYPCN9XLMJPYZVFJSAY9FQHCCLWTOLLUGKKMXYFDBOOYFBLBI9WUEILGECYM",
    "duration": 0
}


 /home/iotahub/documentation/getting-started/0.1/tutorials/run-your-own-iri-node.md
```bash
    docker run hello-world
    
```
    Unable to find image 'hello-world:latest' locally
    latest: Pulling from library/hello-world
    1b930d010525: Pull complete
    Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535
    Status: Downloaded newer image for hello-world:latest

    Hello from Docker!
    This message shows that your installation appears to be working correctly.

    To generate this message, Docker took the following steps:
    1. The Docker client contacted the Docker daemon.
    2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
        (amd64)
    3. The Docker daemon created a new container from that image which runs the
        executable that produces the output you are currently reading.
    4. The Docker daemon streamed that output to the Docker client, which sent it
        to your terminal.

    To try something more ambitious, you can run an Ubuntu container with:
    docker run -it ubuntu bash

    Share images, automate workflows, and more with a free Docker ID:
    https://hub.docker.com/

    For more examples and ideas, visit:
    https://docs.docker.com/get-started/
    
```bash
    docker pull iotaledger/iri:latest
    
```bash
    docker run --name iri iotaledger/iri:latest --remote true -p 14265
    
```bash
    curl http://localhost:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{"command": "getNodeInfo"}'
    
```json
    {
    "appName": "IRI",
    "appVersion": "1.7.0-RELEASE",
    "jreAvailableProcessors": 8,
    "jreFreeMemory": 2115085674,
    "jreVersion": "1.8.0_191",
    "jreMaxMemory": 20997734400,
    "jreTotalMemory": 4860129502,
    "latestMilestone": "CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999",
    "latestMilestoneIndex": 1050373,
    "latestSolidSubtangleMilestone": "CUOENIPTRCNECMVOXSWKOONGZJICAPH9FIG9F9KYXF9VYXFUKTNDCCLLWRZNUHZIGLJZFWPOVCIZA9999",
    "latestSolidSubtangleMilestoneIndex": 1050373,
    "milestoneStartIndex": -1,
    "lastSnapshottedMilestoneIndex": 1039138,
    "neighbors":0,
    "packetsQueueSize":0,
    "time":1548407444641,
    "tips":0,
    "transactionsToRequest":0,
    "features":["snapshotPruning","dnsRefresher","tipSolidification"],
    "coordinatorAddress": "EQSAUZXULTTYZCLNJNTXQTQHOMOFZERHTCGTXOLTVAHKSA9OGAZDEKECURBRIXIJWNPFCQIOVFVVXJVD9",
    "duration": 0
    }
    

 /home/iotahub/documentation/getting-started/0.1/transactions/reattach-rebroadcast-promote.md

 /home/iotahub/documentation/getting-started/0.1/transactions/bundles.md
```json
{
 "hash": "QBQJSWUNGCVKD9ITQ9ZFHVVPGLULOOTG9JQMUOSYHEWAFQPFUIYFCRFSRYKQUXSEVPFSPONEYQQMA9999",
 "signatureMessageFragment
 "address": "AABKJZWQQHGMWGMPNVLHNSFBIGZWGVXPBJORIDDRKQH99J9BEQODRHUHPAXQUUPNTHYETKJYBSKBOKLQD",
 "value": 1,
 "obsoleteTag": "GANGLE9BEAT9999999999999999",
 "timestamp": 1572432012,
 "currentIndex": 0,
 "lastIndex": 2,
 "bundle": "VYWGQWFTIJZTGPBVVG9BPJLRA9ESUJAZEKRJDCJJLILLSKBKJIABORSOECNPDDNAQHBRFFEXIIY9SWFJX",
 "trunkTransaction": "BSFIPSKZEJINFBLSLOHJEXWUDTQPKBEYWKYCHZCTDTWHRZLPQUFBBQKTAUGICALTIQIYSDFTUMRG99999",
 "branchTransaction": "TXLAUYNHYMAEVHCMEHOBDFIGDXBTIKRVLOOKSTXQPPCFOMLLPTYAAR9AKSJXLAEYNEJGUEPAHIPTZ9999",
 "tag": "TANGLE9BEAT9999999999999999",
 "attachmentTimestamp": 1572432013094,
 "attachmentTimestampLowerBound": 0,
 "attachmentTimestampUpperBound": 11,
 "nonce": "POWSRVIO9VMIJ99FPKVVGGPNNNP"
}

```json
{
 "hash": "BSFIPSKZEJINFBLSLOHJEXWUDTQPKBEYWKYCHZCTDTWHRZLPQUFBBQKTAUGICALTIQIYSDFTUMRG99999",
 "signatureMessageFragment
 "address": "UIHPDAKXUFWHZEGBKLDPNGQCEQ9XR9PHNVFBFNCYCFQHLUSGRSMXKGTCUPEBLWFKFPIORAUZXPUAOQOLC",
 "value": -1,
 "obsoleteTag": "999999999999999999999999999",
 "timestamp": 1572432012,
 "currentIndex": 1,
 "lastIndex": 2,
 "bundle": "VYWGQWFTIJZTGPBVVG9BPJLRA9ESUJAZEKRJDCJJLILLSKBKJIABORSOECNPDDNAQHBRFFEXIIY9SWFJX",
 "trunkTransaction": "S9JXORYFIWNHBZKEFGDXYOELOLAQKJSDGUULPX9F9WFFLFIBVSFCGRJWPKQQJGEYQZQMGALODVNM99999",
 "branchTransaction": "TXLAUYNHYMAEVHCMEHOBDFIGDXBTIKRVLOOKSTXQPPCFOMLLPTYAAR9AKSJXLAEYNEJGUEPAHIPTZ9999",
 "tag": "999999999999999999999999999",
 "attachmentTimestamp": 1572432012848,
 "attachmentTimestampLowerBound": 0,
 "attachmentTimestampUpperBound": 11,
 "nonce": "POWSRVIO9VMIJ99UTEKETKNNNNT"
}

```json
{
 "hash": "S9JXORYFIWNHBZKEFGDXYOELOLAQKJSDGUULPX9F9WFFLFIBVSFCGRJWPKQQJGEYQZQMGALODVNM99999",
 "signatureMessageFragment
 "address": "UIHPDAKXUFWHZEGBKLDPNGQCEQ9XR9PHNVFBFNCYCFQHLUSGRSMXKGTCUPEBLWFKFPIORAUZXPUAOQOLC",
 "value": 0,
 "obsoleteTag": "999999999999999999999999999",
 "timestamp": 1572432012,
 "currentIndex": 2,
 "lastIndex": 2,
 "bundle": "VYWGQWFTIJZTGPBVVG9BPJLRA9ESUJAZEKRJDCJJLILLSKBKJIABORSOECNPDDNAQHBRFFEXIIY9SWFJX",
 "trunkTransaction": "TXLAUYNHYMAEVHCMEHOBDFIGDXBTIKRVLOOKSTXQPPCFOMLLPTYAAR9AKSJXLAEYNEJGUEPAHIPTZ9999",
 "branchTransaction": "HKYJHPJBCDFNMKBABLCCBDZWYDDNTLCHOPFMBXDIRCMJQCKUJ9BSHNPD9WMSMSMI9KJFWYDZAOHCZ9999",
 "tag": "999999999999999999999999999",
 "attachmentTimestamp": 1572432012650,
 "attachmentTimestampLowerBound": 0,
 "attachmentTimestampUpperBound": 11,
 "nonce": "POWSRVIO9VMIJ99OKTVPNGPNNNV"
}

```json
{
 "hash": "ZSOH9CJJUKADSXM9EDYHGBNDQZ9NHCZVRMLRDQAENHIJDFBITQBYWXOWUFTYMFQN9WPVQMSFYVNLZ9999",
 "signatureMessageFragment
 "address": "TANGLEMIXER9TANGLEMIXER9TANGLEMIXER9TANGLEMIXER9TANGLEMIXER9TANGLEMIXER9999999999",
 "value": 0,
 "obsoleteTag": "RBA999999999999999999999999",
 "timestamp": 1572432821,
 "currentIndex": 0,
 "lastIndex": 0,
 "bundle": "TDZWKNLIRTJJVYHCBERTYOQJRZJVPBSIVLHDLGCEODKBCTCJAVBNHIJMEN9JTFDIDOGABLLJDNDDZZKKC",
 "trunkTransaction": "YZQQVDWREFIBNQSSGXWEIK9FXEFPQWX9YOIAF9GBKBSWEQNMFWNNYPNZMLWCHIDLSRBHV9YZE9WR99999",
 "branchTransaction": "LMHBWUMPXQLTAMJFURAFCHTUNVZLIDLXASZMDJB9BFCVB9YWEBKTECNJMGSODHRMDNIAVHZRPDAAA9999",
 "tag": "RBA999999999999999999999999",
 "attachmentTimestamp": 1572432821659,
 "attachmentTimestampLowerBound": 0,
 "attachmentTimestampUpperBound": 3812798742493,
 "nonce": "DHODVTZTMKJTVALTJBMDUANZOOQ"
}


 /home/iotahub/documentation/getting-started/0.1/transactions/transactions.md
```json
{
 "hash": "GOYYXODDTVTHSLMRECBXJROIBHRNJ9ZPDATIUTQAJSWYD9GKVVERXWNHFFDOMQHQYDGRUGWR9W9R99999",
 "signatureMessageFragment
 "address": "LEYNSIMADMXAUYRGXKKEXPHDMZLRISZBSRZXUMCIKP9JQDOXSCIUGKYFFNPPVPGCHEJAWWSDHCKGOORPC",
 "value": -100000000,
 "obsoleteTag": "ANDROID9WALLET9TRANSFER9999",
 "timestamp": 1507558559,
 "currentIndex": 1,
 "lastIndex": 3,
 "bundle": "VAJOHANFEOTRSIPCLG9MIPENDFPLQQUGSBLBHMKZ9XVCUSWIKJOOHSPWJAXVLPTAKMPURYAYD9ONODVOW",
 "trunkTransaction": "BSQTZZSXBAGNCBLEUFMWDOITACAK9DKVRTTVYEDQENTEWWCAAFKXWP9Q9MHRS9ZQPXTSRFGZJNEGZ9999",
 "branchTransaction": "9QEIQDDDMLMTMYDDURPYKJJZ9MOLGYBRI9DSOWGRIEKTKPJKUKZPGOYJDDZOOSZAIJVZWBQGVPJCA9999",
 "tag": "ANDROID9WALLET9TRANSFER9999",
 "attachmentTimestamp": 1572010100517,
 "attachmentTimestampLowerBound": 0,
 "attachmentTimestampUpperBound": 3812798742493,
 "nonce": "9ADKOSMXLFDYTED9NXYMAWABEAS"
}

```json
{
 "hash": "9UNGZBAIGVLRHPLKYTGSPZRQWNLG9DVIZEVJOYLVMJUHLWHMIIF9IAXTYTZHQTBQBUBBSRMBXHEC99999",
 "signatureMessageFragment
 "address": "LEYNSIMADMXAUYRGXKKEXPHDMZLRISZBSRZXUMCIKP9JQDOXSCIUGKYFFNPPVPGCHEJAWWSDHCKGOORPC",
 "value": 99999998,
 "obsoleteTag": "ANDROID9WALLET9TRANSFER9999",
 "timestamp": 1507558559,
 "currentIndex": 3,
 "lastIndex": 3,
 "bundle": "VAJOHANFEOTRSIPCLG9MIPENDFPLQQUGSBLBHMKZ9XVCUSWIKJOOHSPWJAXVLPTAKMPURYAYD9ONODVOW",
 "trunkTransaction": "ZWHYWAXHUGRQMRBCDYJGZMCYFJRQEUX9NAAKCHUKQDGIIJMFDAAWTRZZZXTFCOUANXK9GWTUDKEB99999",
 "branchTransaction": "PRJCVOAEAQXOHSTGLFVUYRKGBCXSKOEYU9DEYGSTMAKPGFNEKVBSAUSKVCFDRGHWCKIHPGSXGHTZZ9999",
 "tag": "ANDROID9WALLET9TRANSFER9999",
 "attachmentTimestamp": 1572076153742,
 "attachmentTimestampLowerBound": 0,
 "attachmentTimestampUpperBound": 3812798742493,
 "nonce": "XOOWILZJ9GWTROWMMWBFWZUCFXL"
}

```json
 {
  "hash": "ZFLRESUHTVAAVUBTTOEY9KGXQAZHDKLYAGEJZ9GPUXVZNPVGEDSNARVMUZYWIJJPFQTMNHOPVZSGK9999",
  "signatureMessageFragment": "RBTC9D9DCDEAFCCDFD9DSCFA999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
  "address": "JJRJVMQQAKNRKKHKPKCLHPHACJFJTNHRKJTHJNCJAJVJ9U9KKFJDOIQITDWIHLPRORXCHUOGDUPCIJXMY",
  "value": 0,
  "obsoleteTag": "UA9999999999999999999999999",
  "timestamp": 1572276504,
  "currentIndex": 0,
  "lastIndex": 0,
  "bundle": "VQRKLYGVLLCSEPZFQEZJZJIPPRAUGZDCXTURAKGEXT9LUR9J9BSHCQTZEJPFBEIAHJEYYQ9IBWZUIOW9Y",
  "trunkTransaction": "WCOJRHDCODZAFM9HTTLQNGQFJLDB9SVQXBTAM9XMPUNBSW9BUQWSYAVLQJFHOOZR9UOJXDGSVETGYM999",
  "branchTransaction": "JMCVKXBXPWIEXBIOFCDHIKMMLJKUDWPMPXADSQYXHPYRSNUPK9KROCYFHTETALUBGTDQCLVC9CRVJN999",
  "tag": "UA9999999999999999999999999",
  "attachmentTimestamp": 1572276505684,
  "attachmentTimestampLowerBound": 0,
  "attachmentTimestampUpperBound": 3812798742493,
  "nonce": "OVMNHAVIBLEDUCRUSLKVGGBCVTM"
 }


 /home/iotahub/documentation/getting-started/0.1/transactions/masked-authenticated-messaging.md

 /home/iotahub/documentation/getting-started/0.1/transactions/depth.md

 /home/iotahub/documentation/getting-started/0.1/transactions/proof-of-work.md

 /home/iotahub/documentation/general/0.1/doc-index.md

 /home/iotahub/documentation/general/0.1/how-to-guides/set-up-virtual-machine.md
```bash
    sudo apt-get upgrade
    
```bash
    sudo apt install net-tools
    
```bash
    sudo apt-get install openssh-server
    
```bash
    ifconfig
    
```bash
    ssh $IP_ADDRESS_FROM_STEP_7
    

 /home/iotahub/documentation/general/0.1/how-to-guides/expose-your-local-device.md
```bash
    route -n
    
```bash
    ifconfig | grep netmask
    
```bash
    sudo nano /etc/netplan/01-netcfg.yaml
    
```yaml
    # This file describes the network interfaces available on your system
    # For more information, see netplan(5).
    network:
    version: 2
    renderer: networkd
    ethernets:
        ens33:
        dhcp4: no
        dhcp6: no
        addresses: [192.168.1.77/24]
        gateway4: 192.168.1.1
        nameservers:
            addresses: [1.1.1.1,8.8.8.8]
    
```bash
    sudo netplan apply
    
```bash
    route -n
    

 /home/iotahub/documentation/general/0.1/introduction/overview.md
